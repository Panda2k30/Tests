{"uid":"d9def365b5eeec01","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1733482148588,"stop":1733482161115,"duration":12527},"status":"failed","statusMessage":"Failed: Error when checking success message after publication: Message: \nStacktrace:\n#0 0x55d6218cc34a <unknown>\n#1 0x55d6213e26e0 <unknown>\n#2 0x55d6214313e6 <unknown>\n#3 0x55d621431681 <unknown>\n#4 0x55d621476b04 <unknown>\n#5 0x55d62145548d <unknown>\n#6 0x55d621473ed7 <unknown>\n#7 0x55d621455203 <unknown>\n#8 0x55d621423cc0 <unknown>\n#9 0x55d621424c9e <unknown>\n#10 0x55d621899d3b <unknown>\n#11 0x55d62189dcc2 <unknown>\n#12 0x55d621886b6c <unknown>\n#13 0x55d62189e837 <unknown>\n#14 0x55d62186c10f <unknown>\n#15 0x55d6218bb5a8 <unknown>\n#16 0x55d6218bb770 <unknown>\n#17 0x55d6218cb1c6 <unknown>\n#18 0x7f2dbd5aa609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e171800783956820a752674265feb434\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Successfully send\"\n        try:\n>           success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[contains(@class, 'toast ')]\")))\n\nwallet_tests/test_wallet_send_inscription.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e171800783956820a752674265feb434\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f01e1b92ca0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d6218cc34a <unknown>\nE       #1 0x55d6213e26e0 <unknown>\nE       #2 0x55d6214313e6 <unknown>\nE       #3 0x55d621431681 <unknown>\nE       #4 0x55d621476b04 <unknown>\nE       #5 0x55d62145548d <unknown>\nE       #6 0x55d621473ed7 <unknown>\nE       #7 0x55d621455203 <unknown>\nE       #8 0x55d621423cc0 <unknown>\nE       #9 0x55d621424c9e <unknown>\nE       #10 0x55d621899d3b <unknown>\nE       #11 0x55d62189dcc2 <unknown>\nE       #12 0x55d621886b6c <unknown>\nE       #13 0x55d62189e837 <unknown>\nE       #14 0x55d62186c10f <unknown>\nE       #15 0x55d6218bb5a8 <unknown>\nE       #16 0x55d6218bb770 <unknown>\nE       #17 0x55d6218cb1c6 <unknown>\nE       #18 0x7f2dbd5aa609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e171800783956820a752674265feb434\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Successfully send\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[contains(@class, 'toast ')]\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n>           pytest.fail(f\"Error when checking success message after publication: {e}\")\nE           Failed: Error when checking success message after publication: Message: \nE           Stacktrace:\nE           #0 0x55d6218cc34a <unknown>\nE           #1 0x55d6213e26e0 <unknown>\nE           #2 0x55d6214313e6 <unknown>\nE           #3 0x55d621431681 <unknown>\nE           #4 0x55d621476b04 <unknown>\nE           #5 0x55d62145548d <unknown>\nE           #6 0x55d621473ed7 <unknown>\nE           #7 0x55d621455203 <unknown>\nE           #8 0x55d621423cc0 <unknown>\nE           #9 0x55d621424c9e <unknown>\nE           #10 0x55d621899d3b <unknown>\nE           #11 0x55d62189dcc2 <unknown>\nE           #12 0x55d621886b6c <unknown>\nE           #13 0x55d62189e837 <unknown>\nE           #14 0x55d62186c10f <unknown>\nE           #15 0x55d6218bb5a8 <unknown>\nE           #16 0x55d6218bb770 <unknown>\nE           #17 0x55d6218cb1c6 <unknown>\nE           #18 0x7f2dbd5aa609 start_thread\n\nwallet_tests/test_wallet_send_inscription.py:68: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733482069113,"stop":1733482069114,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1733482147998,"stop":1733482148587,"duration":589},"status":"passed","steps":[],"attachments":[{"uid":"b227deaf0659bc9d","name":"Driver","source":"b227deaf0659bc9d.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Error when checking success message after publication: Message: \nStacktrace:\n#0 0x55d6218cc34a <unknown>\n#1 0x55d6213e26e0 <unknown>\n#2 0x55d6214313e6 <unknown>\n#3 0x55d621431681 <unknown>\n#4 0x55d621476b04 <unknown>\n#5 0x55d62145548d <unknown>\n#6 0x55d621473ed7 <unknown>\n#7 0x55d621455203 <unknown>\n#8 0x55d621423cc0 <unknown>\n#9 0x55d621424c9e <unknown>\n#10 0x55d621899d3b <unknown>\n#11 0x55d62189dcc2 <unknown>\n#12 0x55d621886b6c <unknown>\n#13 0x55d62189e837 <unknown>\n#14 0x55d62186c10f <unknown>\n#15 0x55d6218bb5a8 <unknown>\n#16 0x55d6218bb770 <unknown>\n#17 0x55d6218cb1c6 <unknown>\n#18 0x7f2dbd5aa609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e171800783956820a752674265feb434\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Successfully send\"\n        try:\n>           success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[contains(@class, 'toast ')]\")))\n\nwallet_tests/test_wallet_send_inscription.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e171800783956820a752674265feb434\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f01e1b92ca0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d6218cc34a <unknown>\nE       #1 0x55d6213e26e0 <unknown>\nE       #2 0x55d6214313e6 <unknown>\nE       #3 0x55d621431681 <unknown>\nE       #4 0x55d621476b04 <unknown>\nE       #5 0x55d62145548d <unknown>\nE       #6 0x55d621473ed7 <unknown>\nE       #7 0x55d621455203 <unknown>\nE       #8 0x55d621423cc0 <unknown>\nE       #9 0x55d621424c9e <unknown>\nE       #10 0x55d621899d3b <unknown>\nE       #11 0x55d62189dcc2 <unknown>\nE       #12 0x55d621886b6c <unknown>\nE       #13 0x55d62189e837 <unknown>\nE       #14 0x55d62186c10f <unknown>\nE       #15 0x55d6218bb5a8 <unknown>\nE       #16 0x55d6218bb770 <unknown>\nE       #17 0x55d6218cb1c6 <unknown>\nE       #18 0x7f2dbd5aa609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e171800783956820a752674265feb434\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Successfully send\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//div[contains(@class, 'toast ')]\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n>           pytest.fail(f\"Error when checking success message after publication: {e}\")\nE           Failed: Error when checking success message after publication: Message: \nE           Stacktrace:\nE           #0 0x55d6218cc34a <unknown>\nE           #1 0x55d6213e26e0 <unknown>\nE           #2 0x55d6214313e6 <unknown>\nE           #3 0x55d621431681 <unknown>\nE           #4 0x55d621476b04 <unknown>\nE           #5 0x55d62145548d <unknown>\nE           #6 0x55d621473ed7 <unknown>\nE           #7 0x55d621455203 <unknown>\nE           #8 0x55d621423cc0 <unknown>\nE           #9 0x55d621424c9e <unknown>\nE           #10 0x55d621899d3b <unknown>\nE           #11 0x55d62189dcc2 <unknown>\nE           #12 0x55d621886b6c <unknown>\nE           #13 0x55d62189e837 <unknown>\nE           #14 0x55d62186c10f <unknown>\nE           #15 0x55d6218bb5a8 <unknown>\nE           #16 0x55d6218bb770 <unknown>\nE           #17 0x55d6218cb1c6 <unknown>\nE           #18 0x7f2dbd5aa609 start_thread\n\nwallet_tests/test_wallet_send_inscription.py:68: Failed","steps":[],"attachments":[{"uid":"2e1cf3d16aba5f20","name":"Current ID","source":"2e1cf3d16aba5f20.txt","type":"text/plain","size":44},{"uid":"d8398aab58b6f243","name":"Password","source":"d8398aab58b6f243.txt","type":"text/plain","size":63},{"uid":"f64834179a4ab159","name":"Action","source":"f64834179a4ab159.txt","type":"text/plain","size":20},{"uid":"6f7e8708611f47c7","name":"Action","source":"6f7e8708611f47c7.txt","type":"text/plain","size":40},{"uid":"90184bad2bd233a4","name":"Action","source":"90184bad2bd233a4.txt","type":"text/plain","size":34},{"uid":"2a4270ffb47b0707","name":"Action","source":"2a4270ffb47b0707.txt","type":"text/plain","size":23},{"uid":"17ad9c0557a65557","name":"Action","source":"17ad9c0557a65557.txt","type":"text/plain","size":38},{"uid":"70e17438f44d751e","name":"Action","source":"70e17438f44d751e.txt","type":"text/plain","size":21},{"uid":"2da8904f3a69600b","name":"Navigation","source":"2da8904f3a69600b.txt","type":"text/plain","size":46},{"uid":"d2b611216ccf42d0","name":"Action","source":"d2b611216ccf42d0.txt","type":"text/plain","size":32},{"uid":"6d08530b58f8e29d","name":"Balance","source":"6d08530b58f8e29d.txt","type":"text/plain","size":38},{"uid":"aa8baee098549618","name":"Account Address","source":"aa8baee098549618.txt","type":"text/plain","size":92},{"uid":"21f501f6e22aec93","name":"Action","source":"21f501f6e22aec93.txt","type":"text/plain","size":12},{"uid":"58cb9628eb71377a","name":"Action","source":"58cb9628eb71377a.txt","type":"text/plain","size":24},{"uid":"3023cfed7da0f1dc","name":"ID Card","source":"3023cfed7da0f1dc.txt","type":"text/plain","size":91},{"uid":"37f74fd623a53b2","name":"Action","source":"37f74fd623a53b2.txt","type":"text/plain","size":18},{"uid":"5c8ee87012ad9471","name":"Address Input","source":"5c8ee87012ad9471.txt","type":"text/plain","size":71},{"uid":"161116abb825160b","name":"Action","source":"161116abb825160b.txt","type":"text/plain","size":22},{"uid":"7e48bc82412e762d","name":"To Address","source":"7e48bc82412e762d.txt","type":"text/plain","size":84},{"uid":"6fb19b319d3a98bd","name":"From Address","source":"6fb19b319d3a98bd.txt","type":"text/plain","size":86},{"uid":"540f01afdfb80af4","name":"Table ID","source":"540f01afdfb80af4.txt","type":"text/plain","size":78},{"uid":"c7fe7def6f2d54af","name":"Data Collation","source":"c7fe7def6f2d54af.txt","type":"text/plain","size":18},{"uid":"ce13302bd0252b27","name":"Success","source":"ce13302bd0252b27.txt","type":"text/plain","size":13},{"uid":"25dc3a6ca8c675ef","name":"Action","source":"25dc3a6ca8c675ef.txt","type":"text/plain","size":21},{"uid":"1d35e3587d5ba3ab","name":"Transaction Sent","source":"1d35e3587d5ba3ab.txt","type":"text/plain","size":43}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":25,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1733482161160,"stop":1733482161285,"duration":125},"status":"passed","steps":[],"attachments":[{"uid":"7ae1fe6ee56abb83","name":"Screenshot","source":"7ae1fe6ee56abb83.png","type":"image/png","size":16724}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"14bb7b262926"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('driver')"]},"source":"d9def365b5eeec01.json","parameterValues":[]}