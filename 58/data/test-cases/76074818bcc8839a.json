{"uid":"76074818bcc8839a","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1735636978743,"stop":1735636985000,"duration":6257},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 0040e...f42fe, New value: 047e5...f5c03\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fdf8a17fdc0>('047e5...f5c03', '0040e...f42fe')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b988e81bd57d9c5cb8aeb86f7da1ef67\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 0040e...f42fe, New value: 047e5...f5c03\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fdf8a17fdc0>('047e5...f5c03', '0040e...f42fe')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1735636899170,"stop":1735636899171,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1735636978118,"stop":1735636978741,"duration":623},"status":"passed","steps":[],"attachments":[{"uid":"bb3c08c2cfffb591","name":"Driver","source":"bb3c08c2cfffb591.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 0040e...f42fe, New value: 047e5...f5c03\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fdf8a17fdc0>('047e5...f5c03', '0040e...f42fe')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b988e81bd57d9c5cb8aeb86f7da1ef67\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 0040e...f42fe, New value: 047e5...f5c03\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fdf8a17fdc0>('047e5...f5c03', '0040e...f42fe')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","steps":[],"attachments":[{"uid":"83c15af4baf2b5ee","name":"Current ID","source":"83c15af4baf2b5ee.txt","type":"text/plain","size":44},{"uid":"820492969b46a940","name":"Password","source":"820492969b46a940.txt","type":"text/plain","size":52},{"uid":"5e5cbda384e8efb1","name":"Action","source":"5e5cbda384e8efb1.txt","type":"text/plain","size":20},{"uid":"766c85578a7cb6fa","name":"Action","source":"766c85578a7cb6fa.txt","type":"text/plain","size":40},{"uid":"7a460cc99ccb9917","name":"Action","source":"7a460cc99ccb9917.txt","type":"text/plain","size":34},{"uid":"248f4607690e22cf","name":"Action","source":"248f4607690e22cf.txt","type":"text/plain","size":23},{"uid":"ca4a7f07a91b8285","name":"Action","source":"ca4a7f07a91b8285.txt","type":"text/plain","size":38},{"uid":"b36a52476fc254bd","name":"Action","source":"b36a52476fc254bd.txt","type":"text/plain","size":21},{"uid":"7a7320ce921d0ca6","name":"Navigation","source":"7a7320ce921d0ca6.txt","type":"text/plain","size":46},{"uid":"e73a2acd042b4344","name":"Action","source":"e73a2acd042b4344.txt","type":"text/plain","size":32},{"uid":"5e0b4339b6ae8bdf","name":"Balance","source":"5e0b4339b6ae8bdf.txt","type":"text/plain","size":39},{"uid":"1bdd5133a64b0141","name":"Account Address","source":"1bdd5133a64b0141.txt","type":"text/plain","size":92},{"uid":"b913f1a36a4d4664","name":"Action","source":"b913f1a36a4d4664.txt","type":"text/plain","size":12},{"uid":"ce41b61b5f3785ba","name":"Action","source":"ce41b61b5f3785ba.txt","type":"text/plain","size":24},{"uid":"998375ae992c3f9","name":"ID Card","source":"998375ae992c3f9.txt","type":"text/plain","size":91},{"uid":"f6067ebf8c67c143","name":"Action","source":"f6067ebf8c67c143.txt","type":"text/plain","size":18},{"uid":"c6c7444909de1c8f","name":"Address Input","source":"c6c7444909de1c8f.txt","type":"text/plain","size":71},{"uid":"c4ef7b97f360c128","name":"Action","source":"c4ef7b97f360c128.txt","type":"text/plain","size":22},{"uid":"85b5a6fa6d3d8118","name":"To Address","source":"85b5a6fa6d3d8118.txt","type":"text/plain","size":84},{"uid":"99f838a418f7602c","name":"From Address","source":"99f838a418f7602c.txt","type":"text/plain","size":86},{"uid":"4fff4b40fca3d4c4","name":"Table ID","source":"4fff4b40fca3d4c4.txt","type":"text/plain","size":78},{"uid":"763c68c4ab87faa9","name":"Data Collation","source":"763c68c4ab87faa9.txt","type":"text/plain","size":18},{"uid":"808aa028a1a69fd7","name":"Success","source":"808aa028a1a69fd7.txt","type":"text/plain","size":13},{"uid":"e7450c4e12d2e8ef","name":"Action","source":"e7450c4e12d2e8ef.txt","type":"text/plain","size":21},{"uid":"75c9c4868d28f696","name":"Transaction Sent","source":"75c9c4868d28f696.txt","type":"text/plain","size":43},{"uid":"120a70d6d6e60d04","name":"Action","source":"120a70d6d6e60d04.txt","type":"text/plain","size":18},{"uid":"8c21bfeb0b75063","name":"Transaction","source":"8c21bfeb0b75063.txt","type":"text/plain","size":24},{"uid":"330d51610bf6d159","name":"Action","source":"330d51610bf6d159.txt","type":"text/plain","size":16},{"uid":"124e183d9b269c8","name":"Action","source":"124e183d9b269c8.txt","type":"text/plain","size":21},{"uid":"bdd8834e575bffc7","name":"Action","source":"bdd8834e575bffc7.txt","type":"text/plain","size":34},{"uid":"57f020e66b970118","name":"Action","source":"57f020e66b970118.txt","type":"text/plain","size":23},{"uid":"6580e00b185adf9","name":"Action","source":"6580e00b185adf9.txt","type":"text/plain","size":38},{"uid":"3e3a7049d8578b19","name":"Action","source":"3e3a7049d8578b19.txt","type":"text/plain","size":21},{"uid":"9db3f177a2371ef7","name":"Transaction List","source":"9db3f177a2371ef7.txt","type":"text/plain","size":39},{"uid":"2f7d2ebe54bfe260","name":"Transaction","source":"2f7d2ebe54bfe260.txt","type":"text/plain","size":24},{"uid":"1676696f02861fa4","name":"TXID Check","source":"1676696f02861fa4.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1735636985044,"stop":1735636985187,"duration":143},"status":"passed","steps":[],"attachments":[{"uid":"8d85c484e0aff21d","name":"Screenshot","source":"8d85c484e0aff21d.png","type":"image/png","size":43066}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"14f2a4e5ad7b"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":6},"items":[{"uid":"c7684e5325aca829","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/57//#testresult/c7684e5325aca829","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 8b8ea...8547f, New value: 99505...085b8\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fea1050ddc0>('99505...085b8', '8b8ea...8547f')","time":{"start":1735541643013,"stop":1735541648458,"duration":5445}},{"uid":"71fa1712235cf9d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/56//#testresult/71fa1712235cf9d0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')","time":{"start":1734937469002,"stop":1734937474992,"duration":5990}},{"uid":"44c8feb28aa2418f","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/55//#testresult/44c8feb28aa2418f","status":"passed","time":{"start":1734519066907,"stop":1734519072060,"duration":5153}},{"uid":"33d397e5c8b44fae","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/54//#testresult/33d397e5c8b44fae","status":"passed","time":{"start":1733921537673,"stop":1733921543400,"duration":5727}},{"uid":"d9def365b5eeec01","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/53//#testresult/d9def365b5eeec01","status":"failed","statusDetails":"Failed: Error when checking success message after publication: Message: \nStacktrace:\n#0 0x55d6218cc34a <unknown>\n#1 0x55d6213e26e0 <unknown>\n#2 0x55d6214313e6 <unknown>\n#3 0x55d621431681 <unknown>\n#4 0x55d621476b04 <unknown>\n#5 0x55d62145548d <unknown>\n#6 0x55d621473ed7 <unknown>\n#7 0x55d621455203 <unknown>\n#8 0x55d621423cc0 <unknown>\n#9 0x55d621424c9e <unknown>\n#10 0x55d621899d3b <unknown>\n#11 0x55d62189dcc2 <unknown>\n#12 0x55d621886b6c <unknown>\n#13 0x55d62189e837 <unknown>\n#14 0x55d62186c10f <unknown>\n#15 0x55d6218bb5a8 <unknown>\n#16 0x55d6218bb770 <unknown>\n#17 0x55d6218cb1c6 <unknown>\n#18 0x7f2dbd5aa609 start_thread","time":{"start":1733482148588,"stop":1733482161115,"duration":12527}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"76074818bcc8839a.json","parameterValues":[]}