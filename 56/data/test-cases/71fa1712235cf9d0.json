{"uid":"71fa1712235cf9d0","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1734937469002,"stop":1734937474992,"duration":5990},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b5164eae3ad019cdbc5215785b0d5d6\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1734937387619,"stop":1734937387620,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1734937468387,"stop":1734937469001,"duration":614},"status":"passed","steps":[],"attachments":[{"uid":"af73fd95924cab33","name":"Driver","source":"af73fd95924cab33.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b5164eae3ad019cdbc5215785b0d5d6\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","steps":[],"attachments":[{"uid":"64239062dfd2a7b8","name":"Current ID","source":"64239062dfd2a7b8.txt","type":"text/plain","size":44},{"uid":"4f7287b06dc182fa","name":"Password","source":"4f7287b06dc182fa.txt","type":"text/plain","size":44},{"uid":"5c349efd64b8cdaf","name":"Action","source":"5c349efd64b8cdaf.txt","type":"text/plain","size":20},{"uid":"f6d2cf1dfc199fff","name":"Action","source":"f6d2cf1dfc199fff.txt","type":"text/plain","size":40},{"uid":"c68c4e511e8ddf25","name":"Action","source":"c68c4e511e8ddf25.txt","type":"text/plain","size":34},{"uid":"3f23bd88f8de086a","name":"Action","source":"3f23bd88f8de086a.txt","type":"text/plain","size":23},{"uid":"2a52e28c6895cee4","name":"Action","source":"2a52e28c6895cee4.txt","type":"text/plain","size":38},{"uid":"913b9474b2c94fe6","name":"Action","source":"913b9474b2c94fe6.txt","type":"text/plain","size":21},{"uid":"9a8741f3aebade12","name":"Navigation","source":"9a8741f3aebade12.txt","type":"text/plain","size":46},{"uid":"3b2cb099c1361d88","name":"Action","source":"3b2cb099c1361d88.txt","type":"text/plain","size":32},{"uid":"6acab557def0b16f","name":"Balance","source":"6acab557def0b16f.txt","type":"text/plain","size":34},{"uid":"458138c15bbc35d4","name":"Account Address","source":"458138c15bbc35d4.txt","type":"text/plain","size":92},{"uid":"9a87b7e6fc9d5512","name":"Action","source":"9a87b7e6fc9d5512.txt","type":"text/plain","size":12},{"uid":"dce4075d27710144","name":"Action","source":"dce4075d27710144.txt","type":"text/plain","size":24},{"uid":"266a6a66758fdd9c","name":"ID Card","source":"266a6a66758fdd9c.txt","type":"text/plain","size":91},{"uid":"bf3ab32e8673cff0","name":"Action","source":"bf3ab32e8673cff0.txt","type":"text/plain","size":18},{"uid":"d450c9be18dee526","name":"Address Input","source":"d450c9be18dee526.txt","type":"text/plain","size":71},{"uid":"c327ac168e139730","name":"Action","source":"c327ac168e139730.txt","type":"text/plain","size":22},{"uid":"1393c6593a326dc4","name":"To Address","source":"1393c6593a326dc4.txt","type":"text/plain","size":84},{"uid":"8fa1ba2bd13b8c41","name":"From Address","source":"8fa1ba2bd13b8c41.txt","type":"text/plain","size":86},{"uid":"f2622a602c455bd0","name":"Table ID","source":"f2622a602c455bd0.txt","type":"text/plain","size":78},{"uid":"5d232c29fe11a288","name":"Data Collation","source":"5d232c29fe11a288.txt","type":"text/plain","size":18},{"uid":"ad8d7e4e749014a9","name":"Success","source":"ad8d7e4e749014a9.txt","type":"text/plain","size":13},{"uid":"28fea7f520d9859e","name":"Action","source":"28fea7f520d9859e.txt","type":"text/plain","size":21},{"uid":"774e803d77631bd5","name":"Transaction Sent","source":"774e803d77631bd5.txt","type":"text/plain","size":43},{"uid":"1be93b40b26499bf","name":"Action","source":"1be93b40b26499bf.txt","type":"text/plain","size":18},{"uid":"ac4a6185cae5ae55","name":"Transaction","source":"ac4a6185cae5ae55.txt","type":"text/plain","size":24},{"uid":"eaa6be9ba6e4c63c","name":"Action","source":"eaa6be9ba6e4c63c.txt","type":"text/plain","size":16},{"uid":"928b71f52d50dd14","name":"Action","source":"928b71f52d50dd14.txt","type":"text/plain","size":21},{"uid":"411f0b1988e973ee","name":"Action","source":"411f0b1988e973ee.txt","type":"text/plain","size":34},{"uid":"c2ba411f29e3a41b","name":"Action","source":"c2ba411f29e3a41b.txt","type":"text/plain","size":23},{"uid":"e9854daef54a2e27","name":"Action","source":"e9854daef54a2e27.txt","type":"text/plain","size":38},{"uid":"5fa14cf5f472ce73","name":"Action","source":"5fa14cf5f472ce73.txt","type":"text/plain","size":21},{"uid":"ba1a09ea363c373","name":"Transaction List","source":"ba1a09ea363c373.txt","type":"text/plain","size":39},{"uid":"51621b00135965e","name":"Transaction","source":"51621b00135965e.txt","type":"text/plain","size":24},{"uid":"6d5142b4eb99766","name":"TXID Check","source":"6d5142b4eb99766.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1734937475035,"stop":1734937475202,"duration":167},"status":"passed","steps":[],"attachments":[{"uid":"bf4a78236582d251","name":"Screenshot","source":"bf4a78236582d251.png","type":"image/png","size":40318}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"01bad6ed0c6f"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"44c8feb28aa2418f","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/55//#testresult/44c8feb28aa2418f","status":"passed","time":{"start":1734519066907,"stop":1734519072060,"duration":5153}},{"uid":"33d397e5c8b44fae","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/54//#testresult/33d397e5c8b44fae","status":"passed","time":{"start":1733921537673,"stop":1733921543400,"duration":5727}},{"uid":"d9def365b5eeec01","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/53//#testresult/d9def365b5eeec01","status":"failed","statusDetails":"Failed: Error when checking success message after publication: Message: \nStacktrace:\n#0 0x55d6218cc34a <unknown>\n#1 0x55d6213e26e0 <unknown>\n#2 0x55d6214313e6 <unknown>\n#3 0x55d621431681 <unknown>\n#4 0x55d621476b04 <unknown>\n#5 0x55d62145548d <unknown>\n#6 0x55d621473ed7 <unknown>\n#7 0x55d621455203 <unknown>\n#8 0x55d621423cc0 <unknown>\n#9 0x55d621424c9e <unknown>\n#10 0x55d621899d3b <unknown>\n#11 0x55d62189dcc2 <unknown>\n#12 0x55d621886b6c <unknown>\n#13 0x55d62189e837 <unknown>\n#14 0x55d62186c10f <unknown>\n#15 0x55d6218bb5a8 <unknown>\n#16 0x55d6218bb770 <unknown>\n#17 0x55d6218cb1c6 <unknown>\n#18 0x7f2dbd5aa609 start_thread","time":{"start":1733482148588,"stop":1733482161115,"duration":12527}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"71fa1712235cf9d0.json","parameterValues":[]}