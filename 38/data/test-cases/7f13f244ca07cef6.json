{"uid":"7f13f244ca07cef6","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1732006964816,"stop":1732006970382,"duration":5566},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfda5d19131ac3db30ea59883ead758a\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732006831615,"stop":1732006831616,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732006964253,"stop":1732006964815,"duration":562},"status":"passed","steps":[],"attachments":[{"uid":"d6da30fec01302b9","name":"Driver","source":"d6da30fec01302b9.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dfda5d19131ac3db30ea59883ead758a\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","steps":[],"attachments":[{"uid":"a9f87793cffd8284","name":"Current ID","source":"a9f87793cffd8284.txt","type":"text/plain","size":44},{"uid":"7697dbf17f1a209f","name":"Password","source":"7697dbf17f1a209f.txt","type":"text/plain","size":48},{"uid":"a0b64cabfcdb6548","name":"Action","source":"a0b64cabfcdb6548.txt","type":"text/plain","size":20},{"uid":"8af3ca98d964b266","name":"Action","source":"8af3ca98d964b266.txt","type":"text/plain","size":40},{"uid":"c4ffb127fa3dc42a","name":"Action","source":"c4ffb127fa3dc42a.txt","type":"text/plain","size":34},{"uid":"3759c0850cd87e9b","name":"Action","source":"3759c0850cd87e9b.txt","type":"text/plain","size":23},{"uid":"9d3f7c220ec95215","name":"Action","source":"9d3f7c220ec95215.txt","type":"text/plain","size":38},{"uid":"685d3d0e5434ac04","name":"Action","source":"685d3d0e5434ac04.txt","type":"text/plain","size":21},{"uid":"3daba9b185744ed2","name":"Navigation","source":"3daba9b185744ed2.txt","type":"text/plain","size":46},{"uid":"6e76c01f3b03ff60","name":"Action","source":"6e76c01f3b03ff60.txt","type":"text/plain","size":32},{"uid":"dfc56341d89458d5","name":"Balance","source":"dfc56341d89458d5.txt","type":"text/plain","size":37},{"uid":"35eb4cd52b26493a","name":"Account Address","source":"35eb4cd52b26493a.txt","type":"text/plain","size":92},{"uid":"d07d2b262fa10cc","name":"Action","source":"d07d2b262fa10cc.txt","type":"text/plain","size":12},{"uid":"195e4dbb2478d580","name":"Action","source":"195e4dbb2478d580.txt","type":"text/plain","size":24},{"uid":"d2cd32b2bdd8b720","name":"ID Card","source":"d2cd32b2bdd8b720.txt","type":"text/plain","size":91},{"uid":"f929fbb45c093c3","name":"Action","source":"f929fbb45c093c3.txt","type":"text/plain","size":18},{"uid":"abbee0459a651e8c","name":"Address Input","source":"abbee0459a651e8c.txt","type":"text/plain","size":71},{"uid":"f4c96e616cff910","name":"Action","source":"f4c96e616cff910.txt","type":"text/plain","size":22},{"uid":"88764824943a6c67","name":"To Address","source":"88764824943a6c67.txt","type":"text/plain","size":84},{"uid":"2c118846a61fdcb5","name":"From Address","source":"2c118846a61fdcb5.txt","type":"text/plain","size":86},{"uid":"dfd194b8b22c949a","name":"Table ID","source":"dfd194b8b22c949a.txt","type":"text/plain","size":78},{"uid":"35a8f55bb1dae616","name":"Data Collation","source":"35a8f55bb1dae616.txt","type":"text/plain","size":18},{"uid":"62f7a920849a978d","name":"Success","source":"62f7a920849a978d.txt","type":"text/plain","size":13},{"uid":"673bbeb135f10165","name":"Action","source":"673bbeb135f10165.txt","type":"text/plain","size":21},{"uid":"e368d7ee97f0577f","name":"Transaction Sent","source":"e368d7ee97f0577f.txt","type":"text/plain","size":43},{"uid":"e8403a75b3dcac68","name":"Action","source":"e8403a75b3dcac68.txt","type":"text/plain","size":18},{"uid":"5db4e529ae23d7cf","name":"Transaction","source":"5db4e529ae23d7cf.txt","type":"text/plain","size":24},{"uid":"ce6b1022653d59d8","name":"Action","source":"ce6b1022653d59d8.txt","type":"text/plain","size":16},{"uid":"b60c08c73bf8bb9","name":"Action","source":"b60c08c73bf8bb9.txt","type":"text/plain","size":21},{"uid":"be887fd2edead706","name":"Action","source":"be887fd2edead706.txt","type":"text/plain","size":34},{"uid":"d6e1672b4e26ec7e","name":"Action","source":"d6e1672b4e26ec7e.txt","type":"text/plain","size":23},{"uid":"3ff6f6d76a0f4ff","name":"Action","source":"3ff6f6d76a0f4ff.txt","type":"text/plain","size":38},{"uid":"b632ff6dee016fa1","name":"Action","source":"b632ff6dee016fa1.txt","type":"text/plain","size":21},{"uid":"a6331b6e4c26a574","name":"Transaction List","source":"a6331b6e4c26a574.txt","type":"text/plain","size":39},{"uid":"31ebe8f97e05f544","name":"Transaction","source":"31ebe8f97e05f544.txt","type":"text/plain","size":24},{"uid":"dabbaf5a669ae2eb","name":"TXID Check","source":"dabbaf5a669ae2eb.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732006970386,"stop":1732006970522,"duration":136},"status":"passed","steps":[],"attachments":[{"uid":"3d938ddbfc614ac","name":"Screenshot","source":"3d938ddbfc614ac.png","type":"image/png","size":42833}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"7cac2a83683c"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"7f13f244ca07cef6.json","parameterValues":[]}