{"uid":"566b954e50854aa8","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1732273001243,"stop":1732273006584,"duration":5341},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4717f2376c10c6fdc6692085ad7643b4\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732272705344,"stop":1732272705345,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732273000625,"stop":1732273001242,"duration":617},"status":"passed","steps":[],"attachments":[{"uid":"845f7c5f4315f912","name":"Driver","source":"845f7c5f4315f912.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4717f2376c10c6fdc6692085ad7643b4\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","steps":[],"attachments":[{"uid":"5affb81267e82b09","name":"Current ID","source":"5affb81267e82b09.txt","type":"text/plain","size":44},{"uid":"7493bf1c3236bf1d","name":"Password","source":"7493bf1c3236bf1d.txt","type":"text/plain","size":47},{"uid":"e97a6602fd9a5e8d","name":"Action","source":"e97a6602fd9a5e8d.txt","type":"text/plain","size":20},{"uid":"45ad219a9842b0f6","name":"Action","source":"45ad219a9842b0f6.txt","type":"text/plain","size":40},{"uid":"556735ffe9defeda","name":"Action","source":"556735ffe9defeda.txt","type":"text/plain","size":34},{"uid":"ce5762964da9a26d","name":"Action","source":"ce5762964da9a26d.txt","type":"text/plain","size":23},{"uid":"eb040fa312c65d2d","name":"Action","source":"eb040fa312c65d2d.txt","type":"text/plain","size":38},{"uid":"4df0be1667faf24","name":"Action","source":"4df0be1667faf24.txt","type":"text/plain","size":21},{"uid":"c9092109df0753cf","name":"Navigation","source":"c9092109df0753cf.txt","type":"text/plain","size":46},{"uid":"9ef5d86e136e7421","name":"Action","source":"9ef5d86e136e7421.txt","type":"text/plain","size":32},{"uid":"4af9fbefe6fa1a4","name":"Balance","source":"4af9fbefe6fa1a4.txt","type":"text/plain","size":37},{"uid":"57013a7f41051b9e","name":"Account Address","source":"57013a7f41051b9e.txt","type":"text/plain","size":92},{"uid":"e8120e4e2d860d4a","name":"Action","source":"e8120e4e2d860d4a.txt","type":"text/plain","size":12},{"uid":"ea846e50e466dae8","name":"Action","source":"ea846e50e466dae8.txt","type":"text/plain","size":24},{"uid":"19db167bf95f04bd","name":"ID Card","source":"19db167bf95f04bd.txt","type":"text/plain","size":91},{"uid":"24e102b6f4514597","name":"Action","source":"24e102b6f4514597.txt","type":"text/plain","size":18},{"uid":"37f6a79c61d71a53","name":"Address Input","source":"37f6a79c61d71a53.txt","type":"text/plain","size":71},{"uid":"7c4cb159a96fe2d7","name":"Action","source":"7c4cb159a96fe2d7.txt","type":"text/plain","size":22},{"uid":"e3df3f9a7b5a928","name":"To Address","source":"e3df3f9a7b5a928.txt","type":"text/plain","size":84},{"uid":"3f9d02f60d2afa4b","name":"From Address","source":"3f9d02f60d2afa4b.txt","type":"text/plain","size":86},{"uid":"1c2d1bc36dfbc73","name":"Table ID","source":"1c2d1bc36dfbc73.txt","type":"text/plain","size":78},{"uid":"fabe9f336112ca86","name":"Data Collation","source":"fabe9f336112ca86.txt","type":"text/plain","size":18},{"uid":"996fa04592703cd6","name":"Success","source":"996fa04592703cd6.txt","type":"text/plain","size":13},{"uid":"72ca348a1e338a9d","name":"Action","source":"72ca348a1e338a9d.txt","type":"text/plain","size":21},{"uid":"7b6e59ef23799355","name":"Transaction Sent","source":"7b6e59ef23799355.txt","type":"text/plain","size":43},{"uid":"ab09a9de518f296c","name":"Action","source":"ab09a9de518f296c.txt","type":"text/plain","size":18},{"uid":"c641a99ea8a9470a","name":"Transaction","source":"c641a99ea8a9470a.txt","type":"text/plain","size":24},{"uid":"af9e5af91d5f301f","name":"Action","source":"af9e5af91d5f301f.txt","type":"text/plain","size":16},{"uid":"e2f430e9aab4d258","name":"Action","source":"e2f430e9aab4d258.txt","type":"text/plain","size":21},{"uid":"5e9c8eaf2c42e8ec","name":"Action","source":"5e9c8eaf2c42e8ec.txt","type":"text/plain","size":34},{"uid":"14259aacc2b34d5f","name":"Action","source":"14259aacc2b34d5f.txt","type":"text/plain","size":23},{"uid":"65d980ac81c07c80","name":"Action","source":"65d980ac81c07c80.txt","type":"text/plain","size":38},{"uid":"c2ff6a10bb82d456","name":"Action","source":"c2ff6a10bb82d456.txt","type":"text/plain","size":21},{"uid":"bcf2fa2374fb0391","name":"Transaction List","source":"bcf2fa2374fb0391.txt","type":"text/plain","size":39},{"uid":"7d287c27f5d1da8","name":"Transaction","source":"7d287c27f5d1da8.txt","type":"text/plain","size":24},{"uid":"81f68a92d1f352ec","name":"TXID Check","source":"81f68a92d1f352ec.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732273006588,"stop":1732273006725,"duration":137},"status":"passed","steps":[],"attachments":[{"uid":"ecb9ca616216bb63","name":"Screenshot","source":"ecb9ca616216bb63.png","type":"image/png","size":40188}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"fc3c110a6a3b"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":3,"skipped":0,"passed":1,"unknown":0,"total":8},"items":[{"uid":"53f7eba9f37a97d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/43//#testresult/53f7eba9f37a97d0","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5616daa0e31a <unknown>\n#1 0x5616da5246e0 <unknown>\n#2 0x5616da55bdc8 <unknown>\n#3 0x5616da557926 <unknown>\n#4 0x5616da5a36f6 <unknown>\n#5 0x5616da5a2d46 <unknown>\n#6 0x5616da597203 <unknown>\n#7 0x5616da565cc0 <unknown>\n#8 0x5616da566c9e <unknown>\n#9 0x5616da9dbd0b <unknown>\n#10 0x5616da9dfc92 <unknown>\n#11 0x5616da9c8b3c <unknown>\n#12 0x5616da9e0807 <unknown>\n#13 0x5616da9ae0df <unknown>\n#14 0x5616da9fd578 <unknown>\n#15 0x5616da9fd740 <unknown>\n#16 0x5616daa0d196 <unknown>\n#17 0x7f77b1ba4609 start_thread","time":{"start":1732272406850,"stop":1732272406850,"duration":0}},{"uid":"b51f2d885e4a95cd","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/b51f2d885e4a95cd","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","time":{"start":1732271469554,"stop":1732271475719,"duration":6165}},{"uid":"70493affd58271e4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/70493affd58271e4","status":"passed","time":{"start":1732114456937,"stop":1732114462110,"duration":5173}},{"uid":"ec67a04a81158c39","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/ec67a04a81158c39","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56308c46f31a <unknown>\n#1 0x56308bf856e0 <unknown>\n#2 0x56308bfbcdc8 <unknown>\n#3 0x56308bfb8926 <unknown>\n#4 0x56308c0046f6 <unknown>\n#5 0x56308c003d46 <unknown>\n#6 0x56308bff8203 <unknown>\n#7 0x56308bfc6cc0 <unknown>\n#8 0x56308bfc7c9e <unknown>\n#9 0x56308c43cd0b <unknown>\n#10 0x56308c440c92 <unknown>\n#11 0x56308c429b3c <unknown>\n#12 0x56308c441807 <unknown>\n#13 0x56308c40f0df <unknown>\n#14 0x56308c45e578 <unknown>\n#15 0x56308c45e740 <unknown>\n#16 0x56308c46e196 <unknown>\n#17 0x7fa0f308e609 start_thread","time":{"start":1732114019022,"stop":1732114019022,"duration":0}},{"uid":"6091b7a623d664e2","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/6091b7a623d664e2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","time":{"start":1732008823895,"stop":1732008841477,"duration":17582}},{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"566b954e50854aa8.json","parameterValues":[]}