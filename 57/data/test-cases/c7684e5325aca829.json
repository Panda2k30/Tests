{"uid":"c7684e5325aca829","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1735541643013,"stop":1735541648458,"duration":5445},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 8b8ea...8547f, New value: 99505...085b8\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fea1050ddc0>('99505...085b8', '8b8ea...8547f')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3b0df0b41978ad0a2b1ee3dfe461a445\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 8b8ea...8547f, New value: 99505...085b8\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fea1050ddc0>('99505...085b8', '8b8ea...8547f')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1735541564878,"stop":1735541564879,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1735541642410,"stop":1735541643012,"duration":602},"status":"passed","steps":[],"attachments":[{"uid":"2a5015ab67d7dd38","name":"Driver","source":"2a5015ab67d7dd38.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 8b8ea...8547f, New value: 99505...085b8\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fea1050ddc0>('99505...085b8', '8b8ea...8547f')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3b0df0b41978ad0a2b1ee3dfe461a445\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        expected_success_message = \"Success\"\n        try:\n            success_message = WebDriverWait(driver, 5).until(\n                EC.visibility_of_element_located((By.XPATH, \"//h3[text()='Success']\")))\n    \n            assert success_message.is_displayed(), \"The success message is not displayed\"\n            assert success_message.text == expected_success_message, \\\n                f\"Expected success message: '{expected_success_message}', but got: '{success_message.text}'\"\n        except Exception as e:\n            pytest.fail(f\"Error when checking success message after publication: {e}\")\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 8b8ea...8547f, New value: 99505...085b8\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fea1050ddc0>('99505...085b8', '8b8ea...8547f')\n\nwallet_tests/test_wallet_send_inscription.py:90: AssertionError","steps":[],"attachments":[{"uid":"bc804db7e2a00571","name":"Current ID","source":"bc804db7e2a00571.txt","type":"text/plain","size":44},{"uid":"88c279227ec8cb0a","name":"Password","source":"88c279227ec8cb0a.txt","type":"text/plain","size":70},{"uid":"c25769b193a1754a","name":"Action","source":"c25769b193a1754a.txt","type":"text/plain","size":20},{"uid":"19cb90a8005d36f3","name":"Action","source":"19cb90a8005d36f3.txt","type":"text/plain","size":40},{"uid":"2fac7451e130ef69","name":"Action","source":"2fac7451e130ef69.txt","type":"text/plain","size":34},{"uid":"16e463c5425eb409","name":"Action","source":"16e463c5425eb409.txt","type":"text/plain","size":23},{"uid":"e538e941489bdfb5","name":"Action","source":"e538e941489bdfb5.txt","type":"text/plain","size":38},{"uid":"5f8ac7224ce75145","name":"Action","source":"5f8ac7224ce75145.txt","type":"text/plain","size":21},{"uid":"2a7e2df8548b09eb","name":"Navigation","source":"2a7e2df8548b09eb.txt","type":"text/plain","size":46},{"uid":"fb98d8ad3d05c282","name":"Action","source":"fb98d8ad3d05c282.txt","type":"text/plain","size":32},{"uid":"cca9e71bdbf1d22f","name":"Balance","source":"cca9e71bdbf1d22f.txt","type":"text/plain","size":38},{"uid":"ebd5efd494048012","name":"Account Address","source":"ebd5efd494048012.txt","type":"text/plain","size":92},{"uid":"9436d2b723cabdc8","name":"Action","source":"9436d2b723cabdc8.txt","type":"text/plain","size":12},{"uid":"c015a0bd650c0b51","name":"Action","source":"c015a0bd650c0b51.txt","type":"text/plain","size":24},{"uid":"4a41c2bf20ce76f9","name":"ID Card","source":"4a41c2bf20ce76f9.txt","type":"text/plain","size":91},{"uid":"f443b07f335a8285","name":"Action","source":"f443b07f335a8285.txt","type":"text/plain","size":18},{"uid":"cbc6b880cecb1709","name":"Address Input","source":"cbc6b880cecb1709.txt","type":"text/plain","size":71},{"uid":"50e86eb14540eb26","name":"Action","source":"50e86eb14540eb26.txt","type":"text/plain","size":22},{"uid":"26101aed572995a0","name":"To Address","source":"26101aed572995a0.txt","type":"text/plain","size":84},{"uid":"c2cc3a2bcec60eaa","name":"From Address","source":"c2cc3a2bcec60eaa.txt","type":"text/plain","size":86},{"uid":"eea17cd6863193d","name":"Table ID","source":"eea17cd6863193d.txt","type":"text/plain","size":78},{"uid":"dab9058e6406a435","name":"Data Collation","source":"dab9058e6406a435.txt","type":"text/plain","size":18},{"uid":"adb254860feb5427","name":"Success","source":"adb254860feb5427.txt","type":"text/plain","size":13},{"uid":"2b0ebcb63416784e","name":"Action","source":"2b0ebcb63416784e.txt","type":"text/plain","size":21},{"uid":"3fd7a7c71ac84193","name":"Transaction Sent","source":"3fd7a7c71ac84193.txt","type":"text/plain","size":43},{"uid":"912eaf8dd5c241d6","name":"Action","source":"912eaf8dd5c241d6.txt","type":"text/plain","size":18},{"uid":"36c241e7458eae2a","name":"Transaction","source":"36c241e7458eae2a.txt","type":"text/plain","size":24},{"uid":"bb730304f3017c0f","name":"Action","source":"bb730304f3017c0f.txt","type":"text/plain","size":16},{"uid":"4dca3affb34c347","name":"Action","source":"4dca3affb34c347.txt","type":"text/plain","size":21},{"uid":"a9a3a08bfed4e69a","name":"Action","source":"a9a3a08bfed4e69a.txt","type":"text/plain","size":34},{"uid":"2d6de0fa20030f77","name":"Action","source":"2d6de0fa20030f77.txt","type":"text/plain","size":23},{"uid":"4c1ece8bd5bc20ba","name":"Action","source":"4c1ece8bd5bc20ba.txt","type":"text/plain","size":38},{"uid":"57b26219032549d5","name":"Action","source":"57b26219032549d5.txt","type":"text/plain","size":21},{"uid":"3465751198f27413","name":"Transaction List","source":"3465751198f27413.txt","type":"text/plain","size":39},{"uid":"72a47ea4a62d3c12","name":"Transaction","source":"72a47ea4a62d3c12.txt","type":"text/plain","size":24},{"uid":"e0baa3d1b31cbc6b","name":"TXID Check","source":"e0baa3d1b31cbc6b.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1735541648501,"stop":1735541648676,"duration":175},"status":"passed","steps":[],"attachments":[{"uid":"d0463273f30f113b","name":"Screenshot","source":"d0463273f30f113b.png","type":"image/png","size":43302}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"f1b1ba8ffd29"},{"name":"thread","value":"7-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":5},"items":[{"uid":"71fa1712235cf9d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/56//#testresult/71fa1712235cf9d0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 14e43...68fb5, New value: a693e...94b7d\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fa4a6856dc0>('a693e...94b7d', '14e43...68fb5')","time":{"start":1734937469002,"stop":1734937474992,"duration":5990}},{"uid":"44c8feb28aa2418f","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/55//#testresult/44c8feb28aa2418f","status":"passed","time":{"start":1734519066907,"stop":1734519072060,"duration":5153}},{"uid":"33d397e5c8b44fae","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/54//#testresult/33d397e5c8b44fae","status":"passed","time":{"start":1733921537673,"stop":1733921543400,"duration":5727}},{"uid":"d9def365b5eeec01","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/53//#testresult/d9def365b5eeec01","status":"failed","statusDetails":"Failed: Error when checking success message after publication: Message: \nStacktrace:\n#0 0x55d6218cc34a <unknown>\n#1 0x55d6213e26e0 <unknown>\n#2 0x55d6214313e6 <unknown>\n#3 0x55d621431681 <unknown>\n#4 0x55d621476b04 <unknown>\n#5 0x55d62145548d <unknown>\n#6 0x55d621473ed7 <unknown>\n#7 0x55d621455203 <unknown>\n#8 0x55d621423cc0 <unknown>\n#9 0x55d621424c9e <unknown>\n#10 0x55d621899d3b <unknown>\n#11 0x55d62189dcc2 <unknown>\n#12 0x55d621886b6c <unknown>\n#13 0x55d62189e837 <unknown>\n#14 0x55d62186c10f <unknown>\n#15 0x55d6218bb5a8 <unknown>\n#16 0x55d6218bb770 <unknown>\n#17 0x55d6218cb1c6 <unknown>\n#18 0x7f2dbd5aa609 start_thread","time":{"start":1733482148588,"stop":1733482161115,"duration":12527}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"c7684e5325aca829.json","parameterValues":[]}