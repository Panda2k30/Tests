{"uid":"b51f2d885e4a95cd","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1732271469554,"stop":1732271475719,"duration":6165},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b69c511bcd72246093da54378e38a4bb\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732271255815,"stop":1732271255816,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732271468981,"stop":1732271469553,"duration":572},"status":"passed","steps":[],"attachments":[{"uid":"659579327e5b5467","name":"Driver","source":"659579327e5b5467.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b69c511bcd72246093da54378e38a4bb\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","steps":[],"attachments":[{"uid":"175e3530b3f5cc2d","name":"Current ID","source":"175e3530b3f5cc2d.txt","type":"text/plain","size":44},{"uid":"33828dcc141971e9","name":"Password","source":"33828dcc141971e9.txt","type":"text/plain","size":66},{"uid":"1833ffed31158e24","name":"Action","source":"1833ffed31158e24.txt","type":"text/plain","size":20},{"uid":"4c3ee43bc090a69d","name":"Action","source":"4c3ee43bc090a69d.txt","type":"text/plain","size":40},{"uid":"cdc23985e6847173","name":"Action","source":"cdc23985e6847173.txt","type":"text/plain","size":34},{"uid":"64e2b6154121fb10","name":"Action","source":"64e2b6154121fb10.txt","type":"text/plain","size":23},{"uid":"b8ae3084f1b9be88","name":"Action","source":"b8ae3084f1b9be88.txt","type":"text/plain","size":38},{"uid":"d7b7f23ca7685b31","name":"Action","source":"d7b7f23ca7685b31.txt","type":"text/plain","size":21},{"uid":"b09cf1ba33550028","name":"Navigation","source":"b09cf1ba33550028.txt","type":"text/plain","size":46},{"uid":"e4946a643b802438","name":"Action","source":"e4946a643b802438.txt","type":"text/plain","size":32},{"uid":"571521ac7642ecde","name":"Balance","source":"571521ac7642ecde.txt","type":"text/plain","size":37},{"uid":"2177622beb27ecd4","name":"Account Address","source":"2177622beb27ecd4.txt","type":"text/plain","size":92},{"uid":"15d69952dc8c3822","name":"Action","source":"15d69952dc8c3822.txt","type":"text/plain","size":12},{"uid":"8b6066c46367366c","name":"Action","source":"8b6066c46367366c.txt","type":"text/plain","size":24},{"uid":"2df0682ec2eff63e","name":"ID Card","source":"2df0682ec2eff63e.txt","type":"text/plain","size":91},{"uid":"dadbba4f6a4116f","name":"Action","source":"dadbba4f6a4116f.txt","type":"text/plain","size":18},{"uid":"b36d9c8b3fe2f18a","name":"Address Input","source":"b36d9c8b3fe2f18a.txt","type":"text/plain","size":71},{"uid":"e0ac0ec2111c1a77","name":"Action","source":"e0ac0ec2111c1a77.txt","type":"text/plain","size":22},{"uid":"93f514ab47628881","name":"To Address","source":"93f514ab47628881.txt","type":"text/plain","size":84},{"uid":"76507dc68d210798","name":"From Address","source":"76507dc68d210798.txt","type":"text/plain","size":86},{"uid":"34e5aa7d862b2b54","name":"Table ID","source":"34e5aa7d862b2b54.txt","type":"text/plain","size":78},{"uid":"2054682f06c4cfa5","name":"Data Collation","source":"2054682f06c4cfa5.txt","type":"text/plain","size":18},{"uid":"b01fccb1f4acf518","name":"Success","source":"b01fccb1f4acf518.txt","type":"text/plain","size":13},{"uid":"f016d6a2345d6df0","name":"Action","source":"f016d6a2345d6df0.txt","type":"text/plain","size":21},{"uid":"4ecb6ff46b789fd2","name":"Transaction Sent","source":"4ecb6ff46b789fd2.txt","type":"text/plain","size":43},{"uid":"6d6d9a9aa2dfe27b","name":"Action","source":"6d6d9a9aa2dfe27b.txt","type":"text/plain","size":18},{"uid":"23928266f79019db","name":"Transaction","source":"23928266f79019db.txt","type":"text/plain","size":24},{"uid":"f34a428bf8825321","name":"Action","source":"f34a428bf8825321.txt","type":"text/plain","size":16},{"uid":"787b344cc9bfb659","name":"Action","source":"787b344cc9bfb659.txt","type":"text/plain","size":21},{"uid":"87adfa348e884601","name":"Action","source":"87adfa348e884601.txt","type":"text/plain","size":34},{"uid":"effc2ee805ce5285","name":"Action","source":"effc2ee805ce5285.txt","type":"text/plain","size":23},{"uid":"4c789250edf5562e","name":"Action","source":"4c789250edf5562e.txt","type":"text/plain","size":38},{"uid":"6d89d6c31bf138ab","name":"Action","source":"6d89d6c31bf138ab.txt","type":"text/plain","size":21},{"uid":"3ec514195b00bf4c","name":"Transaction List","source":"3ec514195b00bf4c.txt","type":"text/plain","size":39},{"uid":"5fe088c770909cfe","name":"Transaction","source":"5fe088c770909cfe.txt","type":"text/plain","size":24},{"uid":"efecca4cf7f11d2e","name":"TXID Check","source":"efecca4cf7f11d2e.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732271475723,"stop":1732271475866,"duration":143},"status":"passed","steps":[],"attachments":[{"uid":"701c0f1f4057e96c","name":"Screenshot","source":"701c0f1f4057e96c.png","type":"image/png","size":39352}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"5cb7560cca1f"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":2,"skipped":0,"passed":1,"unknown":0,"total":6},"items":[{"uid":"70493affd58271e4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/70493affd58271e4","status":"passed","time":{"start":1732114456937,"stop":1732114462110,"duration":5173}},{"uid":"ec67a04a81158c39","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/ec67a04a81158c39","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56308c46f31a <unknown>\n#1 0x56308bf856e0 <unknown>\n#2 0x56308bfbcdc8 <unknown>\n#3 0x56308bfb8926 <unknown>\n#4 0x56308c0046f6 <unknown>\n#5 0x56308c003d46 <unknown>\n#6 0x56308bff8203 <unknown>\n#7 0x56308bfc6cc0 <unknown>\n#8 0x56308bfc7c9e <unknown>\n#9 0x56308c43cd0b <unknown>\n#10 0x56308c440c92 <unknown>\n#11 0x56308c429b3c <unknown>\n#12 0x56308c441807 <unknown>\n#13 0x56308c40f0df <unknown>\n#14 0x56308c45e578 <unknown>\n#15 0x56308c45e740 <unknown>\n#16 0x56308c46e196 <unknown>\n#17 0x7fa0f308e609 start_thread","time":{"start":1732114019022,"stop":1732114019022,"duration":0}},{"uid":"6091b7a623d664e2","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/6091b7a623d664e2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","time":{"start":1732008823895,"stop":1732008841477,"duration":17582}},{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"b51f2d885e4a95cd.json","parameterValues":[]}