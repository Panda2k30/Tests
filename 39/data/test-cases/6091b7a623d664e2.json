{"uid":"6091b7a623d664e2","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1732008823895,"stop":1732008841477,"duration":17582},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c972af0538218a60e1a8d45c7a6d5dc6\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n>       nft_page.back_btn()\n\nwallet_tests/test_wallet_send_inscription.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:105: in back_btn\n    back_btn = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c972af0538218a60e1a8d45c7a6d5dc6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f92a78ed1f0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55921b33d4ca <unknown>\nE       #1 0x55921ae50620 <unknown>\nE       #2 0x55921ae9f306 <unknown>\nE       #3 0x55921ae9f5a1 <unknown>\nE       #4 0x55921aee4a04 <unknown>\nE       #5 0x55921aec339d <unknown>\nE       #6 0x55921aee1de0 <unknown>\nE       #7 0x55921aec3113 <unknown>\nE       #8 0x55921ae91be0 <unknown>\nE       #9 0x55921ae92bbe <unknown>\nE       #10 0x55921b309e4b <unknown>\nE       #11 0x55921b30dde2 <unknown>\nE       #12 0x55921b2f6d2c <unknown>\nE       #13 0x55921b30e957 <unknown>\nE       #14 0x55921b2dc4bf <unknown>\nE       #15 0x55921b32c348 <unknown>\nE       #16 0x55921b32c510 <unknown>\nE       #17 0x55921b33c346 <unknown>\nE       #18 0x7f32cd3fa609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732008675364,"stop":1732008675365,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732008823318,"stop":1732008823894,"duration":576},"status":"passed","steps":[],"attachments":[{"uid":"73738e6c624e1d85","name":"Driver","source":"73738e6c624e1d85.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c972af0538218a60e1a8d45c7a6d5dc6\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n>       nft_page.back_btn()\n\nwallet_tests/test_wallet_send_inscription.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:105: in back_btn\n    back_btn = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c972af0538218a60e1a8d45c7a6d5dc6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f92a78ed1f0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55921b33d4ca <unknown>\nE       #1 0x55921ae50620 <unknown>\nE       #2 0x55921ae9f306 <unknown>\nE       #3 0x55921ae9f5a1 <unknown>\nE       #4 0x55921aee4a04 <unknown>\nE       #5 0x55921aec339d <unknown>\nE       #6 0x55921aee1de0 <unknown>\nE       #7 0x55921aec3113 <unknown>\nE       #8 0x55921ae91be0 <unknown>\nE       #9 0x55921ae92bbe <unknown>\nE       #10 0x55921b309e4b <unknown>\nE       #11 0x55921b30dde2 <unknown>\nE       #12 0x55921b2f6d2c <unknown>\nE       #13 0x55921b30e957 <unknown>\nE       #14 0x55921b2dc4bf <unknown>\nE       #15 0x55921b32c348 <unknown>\nE       #16 0x55921b32c510 <unknown>\nE       #17 0x55921b33c346 <unknown>\nE       #18 0x7f32cd3fa609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"7fc10c53126fa91","name":"Current ID","source":"7fc10c53126fa91.txt","type":"text/plain","size":44},{"uid":"b963b73755696f2d","name":"Password","source":"b963b73755696f2d.txt","type":"text/plain","size":76},{"uid":"d90606102ed596dc","name":"Action","source":"d90606102ed596dc.txt","type":"text/plain","size":20},{"uid":"5e7b29b051537975","name":"Action","source":"5e7b29b051537975.txt","type":"text/plain","size":40},{"uid":"ddb5caa0711d44ae","name":"Action","source":"ddb5caa0711d44ae.txt","type":"text/plain","size":34},{"uid":"ec535c83b84b0a1a","name":"Action","source":"ec535c83b84b0a1a.txt","type":"text/plain","size":23},{"uid":"c251b701ac623171","name":"Action","source":"c251b701ac623171.txt","type":"text/plain","size":38},{"uid":"3446e987d6a350ae","name":"Action","source":"3446e987d6a350ae.txt","type":"text/plain","size":21},{"uid":"3a8def8b512b5cdf","name":"Navigation","source":"3a8def8b512b5cdf.txt","type":"text/plain","size":46},{"uid":"1f2cd126599dedc0","name":"Action","source":"1f2cd126599dedc0.txt","type":"text/plain","size":32},{"uid":"a88d129fd89ab301","name":"Balance","source":"a88d129fd89ab301.txt","type":"text/plain","size":37},{"uid":"b4e69e88d13a8043","name":"Account Address","source":"b4e69e88d13a8043.txt","type":"text/plain","size":92},{"uid":"fbf16e5df8761469","name":"Action","source":"fbf16e5df8761469.txt","type":"text/plain","size":12},{"uid":"d26e2a3dc04dbb3b","name":"Action","source":"d26e2a3dc04dbb3b.txt","type":"text/plain","size":24},{"uid":"35410bce20ad8a7b","name":"ID Card","source":"35410bce20ad8a7b.txt","type":"text/plain","size":91},{"uid":"d7894ca10a942c71","name":"Action","source":"d7894ca10a942c71.txt","type":"text/plain","size":18},{"uid":"871bf0798c900d8d","name":"Address Input","source":"871bf0798c900d8d.txt","type":"text/plain","size":71},{"uid":"202f57d6ea15370","name":"Action","source":"202f57d6ea15370.txt","type":"text/plain","size":22},{"uid":"dfd884ad6cd99ac6","name":"To Address","source":"dfd884ad6cd99ac6.txt","type":"text/plain","size":84},{"uid":"e483bcf7d302f8f2","name":"From Address","source":"e483bcf7d302f8f2.txt","type":"text/plain","size":86},{"uid":"5ca5def9d7c25569","name":"Table ID","source":"5ca5def9d7c25569.txt","type":"text/plain","size":78},{"uid":"949fc2e671c56689","name":"Data Collation","source":"949fc2e671c56689.txt","type":"text/plain","size":18},{"uid":"c2533c1934fd2028","name":"Success","source":"c2533c1934fd2028.txt","type":"text/plain","size":13},{"uid":"910dc9663c26522c","name":"Action","source":"910dc9663c26522c.txt","type":"text/plain","size":21},{"uid":"e62289b53fe8e950","name":"Transaction Sent","source":"e62289b53fe8e950.txt","type":"text/plain","size":43}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":25,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732008841486,"stop":1732008841604,"duration":118},"status":"passed","steps":[],"attachments":[{"uid":"874b189f823f2174","name":"Screenshot","source":"874b189f823f2174.png","type":"image/png","size":32008}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"d49ee84af589"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"6091b7a623d664e2.json","parameterValues":[]}