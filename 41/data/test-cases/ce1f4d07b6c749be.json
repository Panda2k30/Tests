{"uid":"ce1f4d07b6c749be","name":"test_change_name[-Name can't be empty-group2]","fullName":"tests.mane_site_tests.test_nintondo_change_name#test_change_name","historyId":"35cbcd15a90875037d4696e60a7fe4f9","time":{"start":1732114297504,"stop":1732114304750,"duration":7246},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (687, -230)\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55f4f2d8731a <unknown>\n#1 0x55f4f289d6e0 <unknown>\n#2 0x55f4f28f30f6 <unknown>\n#3 0x55f4f28f105d <unknown>\n#4 0x55f4f28ee775 <unknown>\n#5 0x55f4f28ed92f <unknown>\n#6 0x55f4f28e10d5 <unknown>\n#7 0x55f4f2910462 <unknown>\n#8 0x55f4f28e0a18 <unknown>\n#9 0x55f4f291062e <unknown>\n#10 0x55f4f292eed7 <unknown>\n#11 0x55f4f2910203 <unknown>\n#12 0x55f4f28decc0 <unknown>\n#13 0x55f4f28dfc9e <unknown>\n#14 0x55f4f2d54d0b <unknown>\n#15 0x55f4f2d58c92 <unknown>\n#16 0x55f4f2d41b3c <unknown>\n#17 0x55f4f2d59807 <unknown>\n#18 0x55f4f2d270df <unknown>\n#19 0x55f4f2d76578 <unknown>\n#20 0x55f4f2d76740 <unknown>\n#21 0x55f4f2d86196 <unknown>\n#22 0x7f8d9425d609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8fdfc3856767a4fb26b1ce0b6029b7f8\")>\nname = '', expected_error = \"Name can't be empty\", check_type = 'group2'\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Test changing user name\")\n    @pytest.mark.parametrize(\"name, expected_error, check_type\", [\n        # (\"B0b\", \"The username must be between 4 and 20 characters long\", \"group2\"), # 3 characters\n        (\"\", \"Name can't be empty\", \"group2\"), # 0 characters\n        (\"A1ex\", \"\", \"group1\"), # 4 characters\n        (\"MyName1sNintondo2024\", \"\", \"group1\"), # 20 characters\n    ])\n    \n    def test_change_name(driver, name, expected_error, check_type):\n    \n        test_connect(driver)\n        time.sleep(0.5)\n    \n        menu = NintondoUserMenu(driver)\n        profile = Nickname(driver)\n    \n        menu.open_menu()\n        menu.menu_profile_btn()\n    \n>       profile.nickname_btn()\n\nmane_site_tests/test_nintondo_change_name.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/mane_site/nintondo_profile.py:84: in nickname_btn\n    nickname_btn.click()\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fadd1dbecd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...wn>\\\\n#20 0x55f4f2d76740 \\\\u003Cunknown>\\\\n#21 0x55f4f2d86196 \\\\u003Cunknown>\\\\n#22 0x7f8d9425d609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (687, -230)\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x55f4f2d8731a <unknown>\nE       #1 0x55f4f289d6e0 <unknown>\nE       #2 0x55f4f28f30f6 <unknown>\nE       #3 0x55f4f28f105d <unknown>\nE       #4 0x55f4f28ee775 <unknown>\nE       #5 0x55f4f28ed92f <unknown>\nE       #6 0x55f4f28e10d5 <unknown>\nE       #7 0x55f4f2910462 <unknown>\nE       #8 0x55f4f28e0a18 <unknown>\nE       #9 0x55f4f291062e <unknown>\nE       #10 0x55f4f292eed7 <unknown>\nE       #11 0x55f4f2910203 <unknown>\nE       #12 0x55f4f28decc0 <unknown>\nE       #13 0x55f4f28dfc9e <unknown>\nE       #14 0x55f4f2d54d0b <unknown>\nE       #15 0x55f4f2d58c92 <unknown>\nE       #16 0x55f4f2d41b3c <unknown>\nE       #17 0x55f4f2d59807 <unknown>\nE       #18 0x55f4f2d270df <unknown>\nE       #19 0x55f4f2d76578 <unknown>\nE       #20 0x55f4f2d76740 <unknown>\nE       #21 0x55f4f2d86196 <unknown>\nE       #22 0x7f8d9425d609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732114263271,"stop":1732114263272,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732114296963,"stop":1732114297502,"duration":539},"status":"passed","steps":[],"attachments":[{"uid":"d4d3409a25471d53","name":"Driver","source":"d4d3409a25471d53.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (687, -230)\n  (Session info: chrome=131.0.6778.85)\nStacktrace:\n#0 0x55f4f2d8731a <unknown>\n#1 0x55f4f289d6e0 <unknown>\n#2 0x55f4f28f30f6 <unknown>\n#3 0x55f4f28f105d <unknown>\n#4 0x55f4f28ee775 <unknown>\n#5 0x55f4f28ed92f <unknown>\n#6 0x55f4f28e10d5 <unknown>\n#7 0x55f4f2910462 <unknown>\n#8 0x55f4f28e0a18 <unknown>\n#9 0x55f4f291062e <unknown>\n#10 0x55f4f292eed7 <unknown>\n#11 0x55f4f2910203 <unknown>\n#12 0x55f4f28decc0 <unknown>\n#13 0x55f4f28dfc9e <unknown>\n#14 0x55f4f2d54d0b <unknown>\n#15 0x55f4f2d58c92 <unknown>\n#16 0x55f4f2d41b3c <unknown>\n#17 0x55f4f2d59807 <unknown>\n#18 0x55f4f2d270df <unknown>\n#19 0x55f4f2d76578 <unknown>\n#20 0x55f4f2d76740 <unknown>\n#21 0x55f4f2d86196 <unknown>\n#22 0x7f8d9425d609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8fdfc3856767a4fb26b1ce0b6029b7f8\")>\nname = '', expected_error = \"Name can't be empty\", check_type = 'group2'\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Test changing user name\")\n    @pytest.mark.parametrize(\"name, expected_error, check_type\", [\n        # (\"B0b\", \"The username must be between 4 and 20 characters long\", \"group2\"), # 3 characters\n        (\"\", \"Name can't be empty\", \"group2\"), # 0 characters\n        (\"A1ex\", \"\", \"group1\"), # 4 characters\n        (\"MyName1sNintondo2024\", \"\", \"group1\"), # 20 characters\n    ])\n    \n    def test_change_name(driver, name, expected_error, check_type):\n    \n        test_connect(driver)\n        time.sleep(0.5)\n    \n        menu = NintondoUserMenu(driver)\n        profile = Nickname(driver)\n    \n        menu.open_menu()\n        menu.menu_profile_btn()\n    \n>       profile.nickname_btn()\n\nmane_site_tests/test_nintondo_change_name.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/mane_site/nintondo_profile.py:84: in nickname_btn\n    nickname_btn.click()\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fadd1dbecd0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...wn>\\\\n#20 0x55f4f2d76740 \\\\u003Cunknown>\\\\n#21 0x55f4f2d86196 \\\\u003Cunknown>\\\\n#22 0x7f8d9425d609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (687, -230)\nE         (Session info: chrome=131.0.6778.85)\nE       Stacktrace:\nE       #0 0x55f4f2d8731a <unknown>\nE       #1 0x55f4f289d6e0 <unknown>\nE       #2 0x55f4f28f30f6 <unknown>\nE       #3 0x55f4f28f105d <unknown>\nE       #4 0x55f4f28ee775 <unknown>\nE       #5 0x55f4f28ed92f <unknown>\nE       #6 0x55f4f28e10d5 <unknown>\nE       #7 0x55f4f2910462 <unknown>\nE       #8 0x55f4f28e0a18 <unknown>\nE       #9 0x55f4f291062e <unknown>\nE       #10 0x55f4f292eed7 <unknown>\nE       #11 0x55f4f2910203 <unknown>\nE       #12 0x55f4f28decc0 <unknown>\nE       #13 0x55f4f28dfc9e <unknown>\nE       #14 0x55f4f2d54d0b <unknown>\nE       #15 0x55f4f2d58c92 <unknown>\nE       #16 0x55f4f2d41b3c <unknown>\nE       #17 0x55f4f2d59807 <unknown>\nE       #18 0x55f4f2d270df <unknown>\nE       #19 0x55f4f2d76578 <unknown>\nE       #20 0x55f4f2d76740 <unknown>\nE       #21 0x55f4f2d86196 <unknown>\nE       #22 0x7f8d9425d609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"cdd9e5e7ac32b127","name":"Current ID","source":"cdd9e5e7ac32b127.txt","type":"text/plain","size":44},{"uid":"d90050adb485d79","name":"Password","source":"d90050adb485d79.txt","type":"text/plain","size":61},{"uid":"95bfa9a62d17978a","name":"Action","source":"95bfa9a62d17978a.txt","type":"text/plain","size":20},{"uid":"ea2fc86d3a18ac34","name":"Action","source":"ea2fc86d3a18ac34.txt","type":"text/plain","size":40},{"uid":"922aaf7b492e32db","name":"Action","source":"922aaf7b492e32db.txt","type":"text/plain","size":34},{"uid":"a8132c9d5f1553ce","name":"Action","source":"a8132c9d5f1553ce.txt","type":"text/plain","size":23},{"uid":"f0630ea1b62806bc","name":"Action","source":"f0630ea1b62806bc.txt","type":"text/plain","size":38},{"uid":"3b44c655874a4118","name":"Action","source":"3b44c655874a4118.txt","type":"text/plain","size":21},{"uid":"493e7e892fd96e8b","name":"Balance","source":"493e7e892fd96e8b.txt","type":"text/plain","size":34},{"uid":"f09f3e5b2281c4a1","name":"Navigation","source":"f09f3e5b2281c4a1.txt","type":"text/plain","size":46},{"uid":"61a1811366c39910","name":"Action","source":"61a1811366c39910.txt","type":"text/plain","size":32},{"uid":"bf4d5ab98aa36a0a","name":"Network Change Action","source":"bf4d5ab98aa36a0a.txt","type":"text/plain","size":19},{"uid":"2080bca847954f91","name":"Connect Button Action","source":"2080bca847954f91.txt","type":"text/plain","size":30},{"uid":"8b04382c43266002","name":"Page Title","source":"8b04382c43266002.txt","type":"text/plain","size":12},{"uid":"58dbfcbf464596d1","name":"Window Switch Action","source":"58dbfcbf464596d1.txt","type":"text/plain","size":52},{"uid":"531435b5d0f02060","name":"Sign Button Action","source":"531435b5d0f02060.txt","type":"text/plain","size":34},{"uid":"307a11a36ac163a8","name":"Expand Menu Action","source":"307a11a36ac163a8.txt","type":"text/plain","size":26},{"uid":"6de9bf4676a31528","name":"Profile Button Action","source":"6de9bf4676a31528.txt","type":"text/plain","size":19}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":18,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732114304775,"stop":1732114304929,"duration":154},"status":"passed","steps":[],"attachments":[{"uid":"a52f7e099dd8d997","name":"Screenshot","source":"a52f7e099dd8d997.png","type":"image/png","size":174102}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Test changing user name"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.mane_site_tests"},{"name":"suite","value":"test_nintondo_change_name"},{"name":"host","value":"65b76ceb6c57"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.mane_site_tests.test_nintondo_change_name"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"check_type","value":"'group2'"},{"name":"expected_error","value":"'Name can't be empty'"},{"name":"name","value":"''"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"62e54fd16b9f8985","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/62e54fd16b9f8985","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x562042a4b31a <unknown>\n#1 0x5620425616e0 <unknown>\n#2 0x562042598dc8 <unknown>\n#3 0x562042594926 <unknown>\n#4 0x5620425e06f6 <unknown>\n#5 0x5620425dfd46 <unknown>\n#6 0x5620425d4203 <unknown>\n#7 0x5620425a2cc0 <unknown>\n#8 0x5620425a3c9e <unknown>\n#9 0x562042a18d0b <unknown>\n#10 0x562042a1cc92 <unknown>\n#11 0x562042a05b3c <unknown>\n#12 0x562042a1d807 <unknown>\n#13 0x5620429eb0df <unknown>\n#14 0x562042a3a578 <unknown>\n#15 0x562042a3a740 <unknown>\n#16 0x562042a4a196 <unknown>\n#17 0x7f2dd3161609 start_thread","time":{"start":1732114012694,"stop":1732114012694,"duration":0}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"ce1f4d07b6c749be.json","parameterValues":["'group2'","'Name can't be empty'","''"]}