{"uid":"8f9882efcf5df3ed","name":"test_valid_sending_transfers","fullName":"tests.wallet_tests.test_wallet_send_transfer#test_valid_sending_transfers","historyId":"898d03df45f80a262ac0dcc9bda2eeff","time":{"start":1732002832652,"stop":1732002838158,"duration":5506},"status":"failed","statusMessage":"AssertionError: Expected a success message, but it was not displayed.\nassert False\n +  where False = is_displayed()\n +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"35dc316ce47d852b3b2792a44b89205c\", element=\"f.17ED124E95B62089E5F0EF9BF72D7FD9.d.1745489FBF7E409F5EE7181917F92DD2.e.57\")>.is_displayed","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"35dc316ce47d852b3b2792a44b89205c\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending transfers from the wallet\")\n    def test_valid_sending_transfers(driver):\n    \n        mane_page = ManePage(driver)\n        settings = WalletSettings(driver)\n        bel_page = TransfersPage(driver)\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        settings.change_network(ex_id) # change network to Testnet\n    \n        mane_page.settings_page_btn()\n    \n        settings.change_type_legacy()\n    \n        first_check = bel_page.check_balance()\n    \n        mane_page.nft_page_btn()\n    \n        bel_page.bel_btn()\n        bel_page.select_transfer()\n        bel_page.send_btn()\n        bel_page.address_input(Data.VALID_ADDRESS_FOR_CHECK)\n        bel_page.select_amount()\n        bel_page.send_btn()\n    \n        # Check for success message\n        time.sleep(0.5)\n    \n        # Locate success message\n        success_message = driver.find_element(By.XPATH, \"//div[contains(@class, 'toast ')]\")\n>       assert success_message.is_displayed(), \"Expected a success message, but it was not displayed.\"\nE       AssertionError: Expected a success message, but it was not displayed.\nE       assert False\nE        +  where False = is_displayed()\nE        +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"35dc316ce47d852b3b2792a44b89205c\", element=\"f.17ED124E95B62089E5F0EF9BF72D7FD9.d.1745489FBF7E409F5EE7181917F92DD2.e.57\")>.is_displayed\n\nwallet_tests/test_wallet_send_transfer.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732002630958,"stop":1732002630959,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732002832103,"stop":1732002832651,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1732002838162,"stop":1732002838307,"duration":145},"status":"passed","steps":[],"attachments":[{"uid":"df8a45aee032e648","name":"Screenshot","source":"df8a45aee032e648.png","type":"image/png","size":48834}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending transfers from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_transfer"},{"name":"host","value":"b84ba1d26cb8"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_transfer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('driver')"]},"source":"8f9882efcf5df3ed.json","parameterValues":[]}