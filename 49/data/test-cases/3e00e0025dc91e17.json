{"uid":"3e00e0025dc91e17","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1733381908751,"stop":1733381926053,"duration":17302},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56149c96134a <unknown>\n#1 0x56149c4776e0 <unknown>\n#2 0x56149c4c63e6 <unknown>\n#3 0x56149c4c6681 <unknown>\n#4 0x56149c50bb04 <unknown>\n#5 0x56149c4ea48d <unknown>\n#6 0x56149c508ed7 <unknown>\n#7 0x56149c4ea203 <unknown>\n#8 0x56149c4b8cc0 <unknown>\n#9 0x56149c4b9c9e <unknown>\n#10 0x56149c92ed3b <unknown>\n#11 0x56149c932cc2 <unknown>\n#12 0x56149c91bb6c <unknown>\n#13 0x56149c933837 <unknown>\n#14 0x56149c90110f <unknown>\n#15 0x56149c9505a8 <unknown>\n#16 0x56149c950770 <unknown>\n#17 0x56149c9601c6 <unknown>\n#18 0x7feb6ec74609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1624851661eee89f91d81c4251f0cb46\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n>       nft_page.back_btn()\n\nwallet_tests/test_wallet_send_inscription.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:105: in back_btn\n    back_btn = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1624851661eee89f91d81c4251f0cb46\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f2902e71ee0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x56149c96134a <unknown>\nE       #1 0x56149c4776e0 <unknown>\nE       #2 0x56149c4c63e6 <unknown>\nE       #3 0x56149c4c6681 <unknown>\nE       #4 0x56149c50bb04 <unknown>\nE       #5 0x56149c4ea48d <unknown>\nE       #6 0x56149c508ed7 <unknown>\nE       #7 0x56149c4ea203 <unknown>\nE       #8 0x56149c4b8cc0 <unknown>\nE       #9 0x56149c4b9c9e <unknown>\nE       #10 0x56149c92ed3b <unknown>\nE       #11 0x56149c932cc2 <unknown>\nE       #12 0x56149c91bb6c <unknown>\nE       #13 0x56149c933837 <unknown>\nE       #14 0x56149c90110f <unknown>\nE       #15 0x56149c9505a8 <unknown>\nE       #16 0x56149c950770 <unknown>\nE       #17 0x56149c9601c6 <unknown>\nE       #18 0x7feb6ec74609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733381831488,"stop":1733381831489,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1733381908147,"stop":1733381908750,"duration":603},"status":"passed","steps":[],"attachments":[{"uid":"f300529ac03b6e92","name":"Driver","source":"f300529ac03b6e92.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56149c96134a <unknown>\n#1 0x56149c4776e0 <unknown>\n#2 0x56149c4c63e6 <unknown>\n#3 0x56149c4c6681 <unknown>\n#4 0x56149c50bb04 <unknown>\n#5 0x56149c4ea48d <unknown>\n#6 0x56149c508ed7 <unknown>\n#7 0x56149c4ea203 <unknown>\n#8 0x56149c4b8cc0 <unknown>\n#9 0x56149c4b9c9e <unknown>\n#10 0x56149c92ed3b <unknown>\n#11 0x56149c932cc2 <unknown>\n#12 0x56149c91bb6c <unknown>\n#13 0x56149c933837 <unknown>\n#14 0x56149c90110f <unknown>\n#15 0x56149c9505a8 <unknown>\n#16 0x56149c950770 <unknown>\n#17 0x56149c9601c6 <unknown>\n#18 0x7feb6ec74609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1624851661eee89f91d81c4251f0cb46\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n>       nft_page.back_btn()\n\nwallet_tests/test_wallet_send_inscription.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:105: in back_btn\n    back_btn = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1624851661eee89f91d81c4251f0cb46\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f2902e71ee0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x56149c96134a <unknown>\nE       #1 0x56149c4776e0 <unknown>\nE       #2 0x56149c4c63e6 <unknown>\nE       #3 0x56149c4c6681 <unknown>\nE       #4 0x56149c50bb04 <unknown>\nE       #5 0x56149c4ea48d <unknown>\nE       #6 0x56149c508ed7 <unknown>\nE       #7 0x56149c4ea203 <unknown>\nE       #8 0x56149c4b8cc0 <unknown>\nE       #9 0x56149c4b9c9e <unknown>\nE       #10 0x56149c92ed3b <unknown>\nE       #11 0x56149c932cc2 <unknown>\nE       #12 0x56149c91bb6c <unknown>\nE       #13 0x56149c933837 <unknown>\nE       #14 0x56149c90110f <unknown>\nE       #15 0x56149c9505a8 <unknown>\nE       #16 0x56149c950770 <unknown>\nE       #17 0x56149c9601c6 <unknown>\nE       #18 0x7feb6ec74609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"6bbdc63760b595ef","name":"Current ID","source":"6bbdc63760b595ef.txt","type":"text/plain","size":44},{"uid":"ef600c21e91e7e32","name":"Password","source":"ef600c21e91e7e32.txt","type":"text/plain","size":43},{"uid":"68d0d86cc7561146","name":"Action","source":"68d0d86cc7561146.txt","type":"text/plain","size":20},{"uid":"77e62008b9609e02","name":"Action","source":"77e62008b9609e02.txt","type":"text/plain","size":40},{"uid":"678c596aa0c21c45","name":"Action","source":"678c596aa0c21c45.txt","type":"text/plain","size":34},{"uid":"db2f7d31209777ec","name":"Action","source":"db2f7d31209777ec.txt","type":"text/plain","size":23},{"uid":"4af344baa3f0ce96","name":"Action","source":"4af344baa3f0ce96.txt","type":"text/plain","size":38},{"uid":"cc555cf0621c714d","name":"Action","source":"cc555cf0621c714d.txt","type":"text/plain","size":21},{"uid":"d61ea659f5890d74","name":"Navigation","source":"d61ea659f5890d74.txt","type":"text/plain","size":46},{"uid":"d2591b54ce72d3f3","name":"Action","source":"d2591b54ce72d3f3.txt","type":"text/plain","size":32},{"uid":"beff6798d40cd055","name":"Balance","source":"beff6798d40cd055.txt","type":"text/plain","size":37},{"uid":"152e69568fee95ee","name":"Account Address","source":"152e69568fee95ee.txt","type":"text/plain","size":92},{"uid":"3a592276f60117f5","name":"Action","source":"3a592276f60117f5.txt","type":"text/plain","size":12},{"uid":"36253b8f0d78e4f9","name":"Action","source":"36253b8f0d78e4f9.txt","type":"text/plain","size":24},{"uid":"c3bf29c98ca53dfe","name":"ID Card","source":"c3bf29c98ca53dfe.txt","type":"text/plain","size":91},{"uid":"4758f50e42568700","name":"Action","source":"4758f50e42568700.txt","type":"text/plain","size":18},{"uid":"21b9aadb2ead3287","name":"Address Input","source":"21b9aadb2ead3287.txt","type":"text/plain","size":71},{"uid":"83b1a8b8dd1a1d66","name":"Action","source":"83b1a8b8dd1a1d66.txt","type":"text/plain","size":22},{"uid":"a5f11b3ee52a9fa2","name":"To Address","source":"a5f11b3ee52a9fa2.txt","type":"text/plain","size":84},{"uid":"be58bf3dde7c98ca","name":"From Address","source":"be58bf3dde7c98ca.txt","type":"text/plain","size":86},{"uid":"b275ccc7a09e3f9a","name":"Table ID","source":"b275ccc7a09e3f9a.txt","type":"text/plain","size":78},{"uid":"324eba3ec50c3a0d","name":"Data Collation","source":"324eba3ec50c3a0d.txt","type":"text/plain","size":18},{"uid":"b9cf752ee53a5cb7","name":"Success","source":"b9cf752ee53a5cb7.txt","type":"text/plain","size":13},{"uid":"4ee33a69bdfd1148","name":"Action","source":"4ee33a69bdfd1148.txt","type":"text/plain","size":21},{"uid":"7806909cde14eb08","name":"Transaction Sent","source":"7806909cde14eb08.txt","type":"text/plain","size":43}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":25,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1733381926062,"stop":1733381926183,"duration":121},"status":"passed","steps":[],"attachments":[{"uid":"570bbb5afb803f87","name":"Screenshot","source":"570bbb5afb803f87.png","type":"image/png","size":32008}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"e07d5fe77d26"},{"name":"thread","value":"7-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":6,"skipped":0,"passed":2,"unknown":0,"total":13},"items":[{"uid":"7f4067c21ff8cb81","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/48//#testresult/7f4067c21ff8cb81","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559cfba2c34a <unknown>\n#1 0x559cfb5426e0 <unknown>\n#2 0x559cfb5913e6 <unknown>\n#3 0x559cfb591681 <unknown>\n#4 0x559cfb5d6b04 <unknown>\n#5 0x559cfb5b548d <unknown>\n#6 0x559cfb5d3ed7 <unknown>\n#7 0x559cfb5b5203 <unknown>\n#8 0x559cfb583cc0 <unknown>\n#9 0x559cfb584c9e <unknown>\n#10 0x559cfb9f9d3b <unknown>\n#11 0x559cfb9fdcc2 <unknown>\n#12 0x559cfb9e6b6c <unknown>\n#13 0x559cfb9fe837 <unknown>\n#14 0x559cfb9cc10f <unknown>\n#15 0x559cfba1b5a8 <unknown>\n#16 0x559cfba1b770 <unknown>\n#17 0x559cfba2b1c6 <unknown>\n#18 0x7f28ff6f4609 start_thread","time":{"start":1733316780629,"stop":1733316798171,"duration":17542}},{"uid":"a4b60d6ee3af0e5a","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/47//#testresult/a4b60d6ee3af0e5a","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: e721b...ede7f, New value: cf047...e6b08\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f13bb3acca0>('cf047...e6b08', 'e721b...ede7f')","time":{"start":1733051030248,"stop":1733051035461,"duration":5213}},{"uid":"7d224351a7d014bf","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/46//#testresult/7d224351a7d014bf","status":"passed","time":{"start":1732888157798,"stop":1732888162664,"duration":4866}},{"uid":"75fd15eaace8a758","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/45//#testresult/75fd15eaace8a758","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a7b7a0f31a <unknown>\n#1 0x55a7b75256e0 <unknown>\n#2 0x55a7b75743e6 <unknown>\n#3 0x55a7b7574681 <unknown>\n#4 0x55a7b75b9b04 <unknown>\n#5 0x55a7b759848d <unknown>\n#6 0x55a7b75b6ed7 <unknown>\n#7 0x55a7b7598203 <unknown>\n#8 0x55a7b7566cc0 <unknown>\n#9 0x55a7b7567c9e <unknown>\n#10 0x55a7b79dcd0b <unknown>\n#11 0x55a7b79e0c92 <unknown>\n#12 0x55a7b79c9b3c <unknown>\n#13 0x55a7b79e1807 <unknown>\n#14 0x55a7b79af0df <unknown>\n#15 0x55a7b79fe578 <unknown>\n#16 0x55a7b79fe740 <unknown>\n#17 0x55a7b7a0e196 <unknown>\n#18 0x7f6524903609 start_thread","time":{"start":1732518588398,"stop":1732518605137,"duration":16739}},{"uid":"566b954e50854aa8","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/44//#testresult/566b954e50854aa8","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')","time":{"start":1732273001243,"stop":1732273006584,"duration":5341}},{"uid":"53f7eba9f37a97d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/43//#testresult/53f7eba9f37a97d0","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5616daa0e31a <unknown>\n#1 0x5616da5246e0 <unknown>\n#2 0x5616da55bdc8 <unknown>\n#3 0x5616da557926 <unknown>\n#4 0x5616da5a36f6 <unknown>\n#5 0x5616da5a2d46 <unknown>\n#6 0x5616da597203 <unknown>\n#7 0x5616da565cc0 <unknown>\n#8 0x5616da566c9e <unknown>\n#9 0x5616da9dbd0b <unknown>\n#10 0x5616da9dfc92 <unknown>\n#11 0x5616da9c8b3c <unknown>\n#12 0x5616da9e0807 <unknown>\n#13 0x5616da9ae0df <unknown>\n#14 0x5616da9fd578 <unknown>\n#15 0x5616da9fd740 <unknown>\n#16 0x5616daa0d196 <unknown>\n#17 0x7f77b1ba4609 start_thread","time":{"start":1732272406850,"stop":1732272406850,"duration":0}},{"uid":"b51f2d885e4a95cd","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/b51f2d885e4a95cd","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","time":{"start":1732271469554,"stop":1732271475719,"duration":6165}},{"uid":"70493affd58271e4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/70493affd58271e4","status":"passed","time":{"start":1732114456937,"stop":1732114462110,"duration":5173}},{"uid":"ec67a04a81158c39","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/ec67a04a81158c39","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56308c46f31a <unknown>\n#1 0x56308bf856e0 <unknown>\n#2 0x56308bfbcdc8 <unknown>\n#3 0x56308bfb8926 <unknown>\n#4 0x56308c0046f6 <unknown>\n#5 0x56308c003d46 <unknown>\n#6 0x56308bff8203 <unknown>\n#7 0x56308bfc6cc0 <unknown>\n#8 0x56308bfc7c9e <unknown>\n#9 0x56308c43cd0b <unknown>\n#10 0x56308c440c92 <unknown>\n#11 0x56308c429b3c <unknown>\n#12 0x56308c441807 <unknown>\n#13 0x56308c40f0df <unknown>\n#14 0x56308c45e578 <unknown>\n#15 0x56308c45e740 <unknown>\n#16 0x56308c46e196 <unknown>\n#17 0x7fa0f308e609 start_thread","time":{"start":1732114019022,"stop":1732114019022,"duration":0}},{"uid":"6091b7a623d664e2","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/6091b7a623d664e2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","time":{"start":1732008823895,"stop":1732008841477,"duration":17582}},{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"3e00e0025dc91e17.json","parameterValues":[]}