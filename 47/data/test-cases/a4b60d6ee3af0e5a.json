{"uid":"a4b60d6ee3af0e5a","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1733051030248,"stop":1733051035461,"duration":5213},"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: e721b...ede7f, New value: cf047...e6b08\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f13bb3acca0>('cf047...e6b08', 'e721b...ede7f')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a1412bea2d3dcfa84febf35afe5a0e16\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: e721b...ede7f, New value: cf047...e6b08\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f13bb3acca0>('cf047...e6b08', 'e721b...ede7f')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1733050952367,"stop":1733050952368,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1733051029664,"stop":1733051030246,"duration":582},"status":"passed","steps":[],"attachments":[{"uid":"320b4cf6ea46567f","name":"Driver","source":"320b4cf6ea46567f.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: TXID has changed! Old value: e721b...ede7f, New value: cf047...e6b08\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f13bb3acca0>('cf047...e6b08', 'e721b...ede7f')","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a1412bea2d3dcfa84febf35afe5a0e16\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n        to_address_tabl = nft_page.return_to_address_tabl()\n        from_address_tabl = nft_page.return_from_address_tabl()\n        id_tabl = nft_page.return_id_tabl()\n    \n        allure.attach(\"Data collation ...\", name=\"Data Collation\", attachment_type=allure.attachment_type.TEXT)\n    \n        # compare all the data\n        assert account_address == from_address_tabl, f\"Address mismatch: {account_address} != {from_address_tabl}\"\n        assert valid_address == to_address_tabl, f\"Address mismatch: {valid_address} != {to_address_tabl}\"\n        assert id_card == id_tabl, f\"ID mismatch: {id_card} != {id_tabl}\"\n    \n        allure.attach(\"Successfully!\", name=\"Success\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.confirm_btn()\n        allure.attach(\"Sent the transcript to a different address!\", name=\"Transaction Sent\", attachment_type=allure.attachment_type.TEXT)\n    \n        nft_page.back_btn()\n    \n        first_wallet_txid = change_network.verify_transaction()\n        change_network.wallet_page_btn()\n        change_network.add_wallet_btn()\n    \n        restore_by_private_key = CreateMnemonic(driver)\n    \n        restore_by_private_key.type_reg_privacy_key()\n        restore_by_private_key.restore_input(Data.KEY_WALLET_FOR_CHECK)\n        restore_by_private_key.conf_create_wallet()\n        restore_by_private_key.conf_recover_wallet()\n    \n        change_network.trans_cont()\n    \n        second_wallet_txid = change_network.verify_transaction()\n    \n        allure.attach(\"Check that the TXIDs are the same...\", name=\"TXID Check\", attachment_type=allure.attachment_type.TEXT)\n    \n        # Check that the TXIDs are the same\n>       assert are_txids_same(second_wallet_txid, first_wallet_txid), (\n            f\"TXID has changed! Old value: {first_wallet_txid}, \"\n            f\"New value: {second_wallet_txid}\"\n        )\nE       AssertionError: TXID has changed! Old value: e721b...ede7f, New value: cf047...e6b08\nE       assert False\nE        +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f13bb3acca0>('cf047...e6b08', 'e721b...ede7f')\n\nwallet_tests/test_wallet_send_inscription.py:78: AssertionError","steps":[],"attachments":[{"uid":"66bf17745f78d01","name":"Current ID","source":"66bf17745f78d01.txt","type":"text/plain","size":44},{"uid":"7edf3a07637102ad","name":"Password","source":"7edf3a07637102ad.txt","type":"text/plain","size":63},{"uid":"a2bf0652d151232e","name":"Action","source":"a2bf0652d151232e.txt","type":"text/plain","size":20},{"uid":"2f56a4548e8e1d1a","name":"Action","source":"2f56a4548e8e1d1a.txt","type":"text/plain","size":40},{"uid":"a864cc4c4b983e6c","name":"Action","source":"a864cc4c4b983e6c.txt","type":"text/plain","size":34},{"uid":"4ffbbdd1d48cf983","name":"Action","source":"4ffbbdd1d48cf983.txt","type":"text/plain","size":23},{"uid":"8edeadb010ac97bc","name":"Action","source":"8edeadb010ac97bc.txt","type":"text/plain","size":38},{"uid":"bdc64b406e2a07aa","name":"Action","source":"bdc64b406e2a07aa.txt","type":"text/plain","size":21},{"uid":"ff30ab7f4ab6fe2a","name":"Navigation","source":"ff30ab7f4ab6fe2a.txt","type":"text/plain","size":46},{"uid":"a744c5b407b66842","name":"Action","source":"a744c5b407b66842.txt","type":"text/plain","size":32},{"uid":"e7487305a731f9e3","name":"Balance","source":"e7487305a731f9e3.txt","type":"text/plain","size":37},{"uid":"3428a6397ab4bfcd","name":"Account Address","source":"3428a6397ab4bfcd.txt","type":"text/plain","size":92},{"uid":"97ad631785cb611e","name":"Action","source":"97ad631785cb611e.txt","type":"text/plain","size":12},{"uid":"bbf4bc16eff1679c","name":"Action","source":"bbf4bc16eff1679c.txt","type":"text/plain","size":24},{"uid":"d24e9809f25c2865","name":"ID Card","source":"d24e9809f25c2865.txt","type":"text/plain","size":91},{"uid":"112933e3534126ef","name":"Action","source":"112933e3534126ef.txt","type":"text/plain","size":18},{"uid":"50e19925c558a1e7","name":"Address Input","source":"50e19925c558a1e7.txt","type":"text/plain","size":71},{"uid":"e1a86a04edd61a6d","name":"Action","source":"e1a86a04edd61a6d.txt","type":"text/plain","size":22},{"uid":"178c30127efc24f6","name":"To Address","source":"178c30127efc24f6.txt","type":"text/plain","size":84},{"uid":"6530084571229272","name":"From Address","source":"6530084571229272.txt","type":"text/plain","size":86},{"uid":"2aac87fb8378bacc","name":"Table ID","source":"2aac87fb8378bacc.txt","type":"text/plain","size":78},{"uid":"a890c3e1d57e1a71","name":"Data Collation","source":"a890c3e1d57e1a71.txt","type":"text/plain","size":18},{"uid":"bb968e70425d0597","name":"Success","source":"bb968e70425d0597.txt","type":"text/plain","size":13},{"uid":"a6ce94002546fb29","name":"Action","source":"a6ce94002546fb29.txt","type":"text/plain","size":21},{"uid":"ea19c786131de603","name":"Transaction Sent","source":"ea19c786131de603.txt","type":"text/plain","size":43},{"uid":"7a5a715c68c338b4","name":"Action","source":"7a5a715c68c338b4.txt","type":"text/plain","size":18},{"uid":"4b7bb9e0b946d328","name":"Transaction","source":"4b7bb9e0b946d328.txt","type":"text/plain","size":24},{"uid":"40fbef0c6365e4be","name":"Action","source":"40fbef0c6365e4be.txt","type":"text/plain","size":16},{"uid":"fc1f3100aa76a802","name":"Action","source":"fc1f3100aa76a802.txt","type":"text/plain","size":21},{"uid":"4101f001ce5ae38e","name":"Action","source":"4101f001ce5ae38e.txt","type":"text/plain","size":34},{"uid":"72c9b3482dacf196","name":"Action","source":"72c9b3482dacf196.txt","type":"text/plain","size":23},{"uid":"235f18201b320169","name":"Action","source":"235f18201b320169.txt","type":"text/plain","size":38},{"uid":"587281502a863cd6","name":"Action","source":"587281502a863cd6.txt","type":"text/plain","size":21},{"uid":"1e83f17cd36ff58","name":"Transaction List","source":"1e83f17cd36ff58.txt","type":"text/plain","size":39},{"uid":"faeae38e3f689a85","name":"Transaction","source":"faeae38e3f689a85.txt","type":"text/plain","size":24},{"uid":"b52acadde774fbc4","name":"TXID Check","source":"b52acadde774fbc4.txt","type":"text/plain","size":36}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":36,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1733051035504,"stop":1733051035630,"duration":126},"status":"passed","steps":[],"attachments":[{"uid":"53a1a625e6e0b9ff","name":"Screenshot","source":"53a1a625e6e0b9ff.png","type":"image/png","size":42104}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"edaec4ff4e35"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":4,"skipped":0,"passed":2,"unknown":0,"total":11},"items":[{"uid":"7d224351a7d014bf","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/46//#testresult/7d224351a7d014bf","status":"passed","time":{"start":1732888157798,"stop":1732888162664,"duration":4866}},{"uid":"75fd15eaace8a758","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/45//#testresult/75fd15eaace8a758","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a7b7a0f31a <unknown>\n#1 0x55a7b75256e0 <unknown>\n#2 0x55a7b75743e6 <unknown>\n#3 0x55a7b7574681 <unknown>\n#4 0x55a7b75b9b04 <unknown>\n#5 0x55a7b759848d <unknown>\n#6 0x55a7b75b6ed7 <unknown>\n#7 0x55a7b7598203 <unknown>\n#8 0x55a7b7566cc0 <unknown>\n#9 0x55a7b7567c9e <unknown>\n#10 0x55a7b79dcd0b <unknown>\n#11 0x55a7b79e0c92 <unknown>\n#12 0x55a7b79c9b3c <unknown>\n#13 0x55a7b79e1807 <unknown>\n#14 0x55a7b79af0df <unknown>\n#15 0x55a7b79fe578 <unknown>\n#16 0x55a7b79fe740 <unknown>\n#17 0x55a7b7a0e196 <unknown>\n#18 0x7f6524903609 start_thread","time":{"start":1732518588398,"stop":1732518605137,"duration":16739}},{"uid":"566b954e50854aa8","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/44//#testresult/566b954e50854aa8","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')","time":{"start":1732273001243,"stop":1732273006584,"duration":5341}},{"uid":"53f7eba9f37a97d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/43//#testresult/53f7eba9f37a97d0","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5616daa0e31a <unknown>\n#1 0x5616da5246e0 <unknown>\n#2 0x5616da55bdc8 <unknown>\n#3 0x5616da557926 <unknown>\n#4 0x5616da5a36f6 <unknown>\n#5 0x5616da5a2d46 <unknown>\n#6 0x5616da597203 <unknown>\n#7 0x5616da565cc0 <unknown>\n#8 0x5616da566c9e <unknown>\n#9 0x5616da9dbd0b <unknown>\n#10 0x5616da9dfc92 <unknown>\n#11 0x5616da9c8b3c <unknown>\n#12 0x5616da9e0807 <unknown>\n#13 0x5616da9ae0df <unknown>\n#14 0x5616da9fd578 <unknown>\n#15 0x5616da9fd740 <unknown>\n#16 0x5616daa0d196 <unknown>\n#17 0x7f77b1ba4609 start_thread","time":{"start":1732272406850,"stop":1732272406850,"duration":0}},{"uid":"b51f2d885e4a95cd","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/b51f2d885e4a95cd","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","time":{"start":1732271469554,"stop":1732271475719,"duration":6165}},{"uid":"70493affd58271e4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/70493affd58271e4","status":"passed","time":{"start":1732114456937,"stop":1732114462110,"duration":5173}},{"uid":"ec67a04a81158c39","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/ec67a04a81158c39","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56308c46f31a <unknown>\n#1 0x56308bf856e0 <unknown>\n#2 0x56308bfbcdc8 <unknown>\n#3 0x56308bfb8926 <unknown>\n#4 0x56308c0046f6 <unknown>\n#5 0x56308c003d46 <unknown>\n#6 0x56308bff8203 <unknown>\n#7 0x56308bfc6cc0 <unknown>\n#8 0x56308bfc7c9e <unknown>\n#9 0x56308c43cd0b <unknown>\n#10 0x56308c440c92 <unknown>\n#11 0x56308c429b3c <unknown>\n#12 0x56308c441807 <unknown>\n#13 0x56308c40f0df <unknown>\n#14 0x56308c45e578 <unknown>\n#15 0x56308c45e740 <unknown>\n#16 0x56308c46e196 <unknown>\n#17 0x7fa0f308e609 start_thread","time":{"start":1732114019022,"stop":1732114019022,"duration":0}},{"uid":"6091b7a623d664e2","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/6091b7a623d664e2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","time":{"start":1732008823895,"stop":1732008841477,"duration":17582}},{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"a4b60d6ee3af0e5a.json","parameterValues":[]}