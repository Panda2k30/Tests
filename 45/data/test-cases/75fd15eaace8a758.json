{"uid":"75fd15eaace8a758","name":"test_valid_sending_inscriptions","fullName":"tests.wallet_tests.test_wallet_send_inscription#test_valid_sending_inscriptions","historyId":"aa060bfe26f63b8291d4d5a12624c444","time":{"start":1732518588398,"stop":1732518605137,"duration":16739},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a7b7a0f31a <unknown>\n#1 0x55a7b75256e0 <unknown>\n#2 0x55a7b75743e6 <unknown>\n#3 0x55a7b7574681 <unknown>\n#4 0x55a7b75b9b04 <unknown>\n#5 0x55a7b759848d <unknown>\n#6 0x55a7b75b6ed7 <unknown>\n#7 0x55a7b7598203 <unknown>\n#8 0x55a7b7566cc0 <unknown>\n#9 0x55a7b7567c9e <unknown>\n#10 0x55a7b79dcd0b <unknown>\n#11 0x55a7b79e0c92 <unknown>\n#12 0x55a7b79c9b3c <unknown>\n#13 0x55a7b79e1807 <unknown>\n#14 0x55a7b79af0df <unknown>\n#15 0x55a7b79fe578 <unknown>\n#16 0x55a7b79fe740 <unknown>\n#17 0x55a7b7a0e196 <unknown>\n#18 0x7f6524903609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5db1089edac69b00eb310a262d17d6e9\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n>       to_address_tabl = nft_page.return_to_address_tabl()\n\nwallet_tests/test_wallet_send_inscription.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:98: in return_to_address_tabl\n    to_address_tabl = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5db1089edac69b00eb310a262d17d6e9\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fda17b0b820>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55a7b7a0f31a <unknown>\nE       #1 0x55a7b75256e0 <unknown>\nE       #2 0x55a7b75743e6 <unknown>\nE       #3 0x55a7b7574681 <unknown>\nE       #4 0x55a7b75b9b04 <unknown>\nE       #5 0x55a7b759848d <unknown>\nE       #6 0x55a7b75b6ed7 <unknown>\nE       #7 0x55a7b7598203 <unknown>\nE       #8 0x55a7b7566cc0 <unknown>\nE       #9 0x55a7b7567c9e <unknown>\nE       #10 0x55a7b79dcd0b <unknown>\nE       #11 0x55a7b79e0c92 <unknown>\nE       #12 0x55a7b79c9b3c <unknown>\nE       #13 0x55a7b79e1807 <unknown>\nE       #14 0x55a7b79af0df <unknown>\nE       #15 0x55a7b79fe578 <unknown>\nE       #16 0x55a7b79fe740 <unknown>\nE       #17 0x55a7b7a0e196 <unknown>\nE       #18 0x7f6524903609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732518294375,"stop":1732518294376,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732518587812,"stop":1732518588397,"duration":585},"status":"passed","steps":[],"attachments":[{"uid":"51efd2818de7972d","name":"Driver","source":"51efd2818de7972d.txt","type":"text/plain","size":20}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a7b7a0f31a <unknown>\n#1 0x55a7b75256e0 <unknown>\n#2 0x55a7b75743e6 <unknown>\n#3 0x55a7b7574681 <unknown>\n#4 0x55a7b75b9b04 <unknown>\n#5 0x55a7b759848d <unknown>\n#6 0x55a7b75b6ed7 <unknown>\n#7 0x55a7b7598203 <unknown>\n#8 0x55a7b7566cc0 <unknown>\n#9 0x55a7b7567c9e <unknown>\n#10 0x55a7b79dcd0b <unknown>\n#11 0x55a7b79e0c92 <unknown>\n#12 0x55a7b79c9b3c <unknown>\n#13 0x55a7b79e1807 <unknown>\n#14 0x55a7b79af0df <unknown>\n#15 0x55a7b79fe578 <unknown>\n#16 0x55a7b79fe740 <unknown>\n#17 0x55a7b7a0e196 <unknown>\n#18 0x7f6524903609 start_thread","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5db1089edac69b00eb310a262d17d6e9\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    @allure.feature(\"Valid sending inscriptions from the wallet\")\n    def test_valid_sending_inscriptions(driver):\n    \n        def are_txids_same(txid1, txid2):\n            return txid1 == txid2\n    \n        # Private key authentication\n        ex_id, password = restore_by_private_key_proc(driver)\n    \n        change_network = ManePage(driver)\n    \n        change_network.change_network(ex_id) # change network to Testnet\n        change_network.get_balance()\n    \n        account_address = change_network.account_address_btn() # get a wallet address\n        change_network.nft_page_btn()\n    \n        nft_page = SendInscription(driver)\n    \n        nft_page.select_inscription()\n        id_card = nft_page.return_id_card() # get the inscription id\n    \n        nft_page.send_btn()\n    \n        valid_address = nft_page.enter_address(Data.VALID_ADDRESS_FOR_CHECK) # get the recipient's address\n        nft_page.continue_btn()\n    \n        # output all data\n>       to_address_tabl = nft_page.return_to_address_tabl()\n\nwallet_tests/test_wallet_send_inscription.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/wallet/wallet_nft_page.py:98: in return_to_address_tabl\n    to_address_tabl = wait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5db1089edac69b00eb310a262d17d6e9\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fda17b0b820>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55a7b7a0f31a <unknown>\nE       #1 0x55a7b75256e0 <unknown>\nE       #2 0x55a7b75743e6 <unknown>\nE       #3 0x55a7b7574681 <unknown>\nE       #4 0x55a7b75b9b04 <unknown>\nE       #5 0x55a7b759848d <unknown>\nE       #6 0x55a7b75b6ed7 <unknown>\nE       #7 0x55a7b7598203 <unknown>\nE       #8 0x55a7b7566cc0 <unknown>\nE       #9 0x55a7b7567c9e <unknown>\nE       #10 0x55a7b79dcd0b <unknown>\nE       #11 0x55a7b79e0c92 <unknown>\nE       #12 0x55a7b79c9b3c <unknown>\nE       #13 0x55a7b79e1807 <unknown>\nE       #14 0x55a7b79af0df <unknown>\nE       #15 0x55a7b79fe578 <unknown>\nE       #16 0x55a7b79fe740 <unknown>\nE       #17 0x55a7b7a0e196 <unknown>\nE       #18 0x7f6524903609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"2b32c25ba572db5a","name":"Current ID","source":"2b32c25ba572db5a.txt","type":"text/plain","size":44},{"uid":"8a6ba4e8a007f19f","name":"Password","source":"8a6ba4e8a007f19f.txt","type":"text/plain","size":47},{"uid":"d6a8c0bc96c7162","name":"Action","source":"d6a8c0bc96c7162.txt","type":"text/plain","size":20},{"uid":"9e15666a7556b4f6","name":"Action","source":"9e15666a7556b4f6.txt","type":"text/plain","size":40},{"uid":"9b2618c44b66a30c","name":"Action","source":"9b2618c44b66a30c.txt","type":"text/plain","size":34},{"uid":"9f327083a21a6907","name":"Action","source":"9f327083a21a6907.txt","type":"text/plain","size":23},{"uid":"575b2746fa06e887","name":"Action","source":"575b2746fa06e887.txt","type":"text/plain","size":38},{"uid":"437bc90850a5a145","name":"Action","source":"437bc90850a5a145.txt","type":"text/plain","size":21},{"uid":"ca2cb6d19df04886","name":"Navigation","source":"ca2cb6d19df04886.txt","type":"text/plain","size":46},{"uid":"a0b25521fed69ed2","name":"Action","source":"a0b25521fed69ed2.txt","type":"text/plain","size":32},{"uid":"6c9eed551d679a31","name":"Balance","source":"6c9eed551d679a31.txt","type":"text/plain","size":34},{"uid":"a93e87db20cf0fa0","name":"Account Address","source":"a93e87db20cf0fa0.txt","type":"text/plain","size":92},{"uid":"a46cb0c5e946dde7","name":"Action","source":"a46cb0c5e946dde7.txt","type":"text/plain","size":12},{"uid":"5e89356d8c9e77c9","name":"Action","source":"5e89356d8c9e77c9.txt","type":"text/plain","size":24},{"uid":"39778995b5358d09","name":"ID Card","source":"39778995b5358d09.txt","type":"text/plain","size":91},{"uid":"fe9639c7fcd76128","name":"Action","source":"fe9639c7fcd76128.txt","type":"text/plain","size":18},{"uid":"7ee234e1867f5075","name":"Address Input","source":"7ee234e1867f5075.txt","type":"text/plain","size":71},{"uid":"e20cddf071b1414e","name":"Action","source":"e20cddf071b1414e.txt","type":"text/plain","size":22}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":18,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1732518605145,"stop":1732518605264,"duration":119},"status":"passed","steps":[],"attachments":[{"uid":"13c83896e5124335","name":"Screenshot","source":"13c83896e5124335.png","type":"image/png","size":35134}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Valid sending inscriptions from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_send_inscription"},{"name":"host","value":"816fbb5eabcd"},{"name":"thread","value":"8-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_send_inscription"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":4,"skipped":0,"passed":1,"unknown":0,"total":9},"items":[{"uid":"566b954e50854aa8","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/44//#testresult/566b954e50854aa8","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: e8155...65390, New value: 5032d...c78ef\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7ff899c57d30>('5032d...c78ef', 'e8155...65390')","time":{"start":1732273001243,"stop":1732273006584,"duration":5341}},{"uid":"53f7eba9f37a97d0","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/43//#testresult/53f7eba9f37a97d0","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5616daa0e31a <unknown>\n#1 0x5616da5246e0 <unknown>\n#2 0x5616da55bdc8 <unknown>\n#3 0x5616da557926 <unknown>\n#4 0x5616da5a36f6 <unknown>\n#5 0x5616da5a2d46 <unknown>\n#6 0x5616da597203 <unknown>\n#7 0x5616da565cc0 <unknown>\n#8 0x5616da566c9e <unknown>\n#9 0x5616da9dbd0b <unknown>\n#10 0x5616da9dfc92 <unknown>\n#11 0x5616da9c8b3c <unknown>\n#12 0x5616da9e0807 <unknown>\n#13 0x5616da9ae0df <unknown>\n#14 0x5616da9fd578 <unknown>\n#15 0x5616da9fd740 <unknown>\n#16 0x5616daa0d196 <unknown>\n#17 0x7f77b1ba4609 start_thread","time":{"start":1732272406850,"stop":1732272406850,"duration":0}},{"uid":"b51f2d885e4a95cd","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/b51f2d885e4a95cd","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 6770d...622f5, New value: e6b22...75672\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7fb87175fca0>('e6b22...75672', '6770d...622f5')","time":{"start":1732271469554,"stop":1732271475719,"duration":6165}},{"uid":"70493affd58271e4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/70493affd58271e4","status":"passed","time":{"start":1732114456937,"stop":1732114462110,"duration":5173}},{"uid":"ec67a04a81158c39","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/ec67a04a81158c39","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x56308c46f31a <unknown>\n#1 0x56308bf856e0 <unknown>\n#2 0x56308bfbcdc8 <unknown>\n#3 0x56308bfb8926 <unknown>\n#4 0x56308c0046f6 <unknown>\n#5 0x56308c003d46 <unknown>\n#6 0x56308bff8203 <unknown>\n#7 0x56308bfc6cc0 <unknown>\n#8 0x56308bfc7c9e <unknown>\n#9 0x56308c43cd0b <unknown>\n#10 0x56308c440c92 <unknown>\n#11 0x56308c429b3c <unknown>\n#12 0x56308c441807 <unknown>\n#13 0x56308c40f0df <unknown>\n#14 0x56308c45e578 <unknown>\n#15 0x56308c45e740 <unknown>\n#16 0x56308c46e196 <unknown>\n#17 0x7fa0f308e609 start_thread","time":{"start":1732114019022,"stop":1732114019022,"duration":0}},{"uid":"6091b7a623d664e2","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/6091b7a623d664e2","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55921b33d4ca <unknown>\n#1 0x55921ae50620 <unknown>\n#2 0x55921ae9f306 <unknown>\n#3 0x55921ae9f5a1 <unknown>\n#4 0x55921aee4a04 <unknown>\n#5 0x55921aec339d <unknown>\n#6 0x55921aee1de0 <unknown>\n#7 0x55921aec3113 <unknown>\n#8 0x55921ae91be0 <unknown>\n#9 0x55921ae92bbe <unknown>\n#10 0x55921b309e4b <unknown>\n#11 0x55921b30dde2 <unknown>\n#12 0x55921b2f6d2c <unknown>\n#13 0x55921b30e957 <unknown>\n#14 0x55921b2dc4bf <unknown>\n#15 0x55921b32c348 <unknown>\n#16 0x55921b32c510 <unknown>\n#17 0x55921b33c346 <unknown>\n#18 0x7f32cd3fa609 start_thread","time":{"start":1732008823895,"stop":1732008841477,"duration":17582}},{"uid":"7f13f244ca07cef6","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/7f13f244ca07cef6","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: ff657...398f2, New value: 0541e...53ee9\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5a89257c10>('0541e...53ee9', 'ff657...398f2')","time":{"start":1732006964816,"stop":1732006970382,"duration":5566}},{"uid":"bc0daade22e73da0","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/bc0daade22e73da0","status":"failed","statusDetails":"AssertionError: TXID has changed! Old value: 7e6e3...d701f, New value: aad70...7905e\nassert False\n +  where False = <function test_valid_sending_inscriptions.<locals>.are_txids_same at 0x7f5f0d3545e0>('aad70...7905e', '7e6e3...d701f')","time":{"start":1732002787827,"stop":1732002794052,"duration":6225}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"75fd15eaace8a758.json","parameterValues":[]}