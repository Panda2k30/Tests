{"uid":"e5b19b2d6636900a","name":"test_restore_by_mnemonic","fullName":"tests.wallet_tests.test_wallet_recovery_by_old_mnemonic#test_restore_by_mnemonic","historyId":"3a7e8f7b93de885cf6ed0b46bc7c42e4","time":{"start":1732272405421,"stop":1732272405421,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5603ec7ee31a <unknown>\n#1 0x5603ec3046e0 <unknown>\n#2 0x5603ec33bdc8 <unknown>\n#3 0x5603ec337926 <unknown>\n#4 0x5603ec3836f6 <unknown>\n#5 0x5603ec382d46 <unknown>\n#6 0x5603ec377203 <unknown>\n#7 0x5603ec345cc0 <unknown>\n#8 0x5603ec346c9e <unknown>\n#9 0x5603ec7bbd0b <unknown>\n#10 0x5603ec7bfc92 <unknown>\n#11 0x5603ec7a8b3c <unknown>\n#12 0x5603ec7c0807 <unknown>\n#13 0x5603ec78e0df <unknown>\n#14 0x5603ec7dd578 <unknown>\n#15 0x5603ec7dd740 <unknown>\n#16 0x5603ec7ed196 <unknown>\n#17 0x7ff69f1f1609 start_thread","statusTrace":"request = <SubRequest 'driver' for <Function test_restore_by_mnemonic>>\n\n    @pytest.fixture(autouse=True, scope=\"function\")\n    def driver(request):\n        options = webdriver.ChromeOptions()\n    \n        # Отключение анимаций\n        options.add_argument(\"--disable-animations\")\n    \n        prefs = {\"profile.managed_default_content_settings.images\": 2}  # 2 отключает загрузку изображений\n        options.add_experimental_option(\"prefs\", prefs)\n    \n        # Прочие настройки\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--window-size=1280,720\")\n        options.add_argument('--disable-dev-shm-usage')\n        options.add_argument('--disable-gpu')\n    \n        # Путь к расширению\n        # project_path = os.path.dirname(os.path.abspath(__file__))\n        # extension_path = f\"{project_path}/extension/dist/chrome\"\n    \n        # CI\n        extension_path = \"/app/extension\"\n    \n        options.add_argument(f\"--load-extension={extension_path}\")\n    \n        # Инициализация драйвера\n>       driver = webdriver.Chrome(options=options)\n\n../conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb1803d37f0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...wn>\\\\n#15 0x5603ec7dd740 \\\\u003Cunknown>\\\\n#16 0x5603ec7ed196 \\\\u003Cunknown>\\\\n#17 0x7ff69f1f1609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5603ec7ee31a <unknown>\nE       #1 0x5603ec3046e0 <unknown>\nE       #2 0x5603ec33bdc8 <unknown>\nE       #3 0x5603ec337926 <unknown>\nE       #4 0x5603ec3836f6 <unknown>\nE       #5 0x5603ec382d46 <unknown>\nE       #6 0x5603ec377203 <unknown>\nE       #7 0x5603ec345cc0 <unknown>\nE       #8 0x5603ec346c9e <unknown>\nE       #9 0x5603ec7bbd0b <unknown>\nE       #10 0x5603ec7bfc92 <unknown>\nE       #11 0x5603ec7a8b3c <unknown>\nE       #12 0x5603ec7c0807 <unknown>\nE       #13 0x5603ec78e0df <unknown>\nE       #14 0x5603ec7dd578 <unknown>\nE       #15 0x5603ec7dd740 <unknown>\nE       #16 0x5603ec7ed196 <unknown>\nE       #17 0x7ff69f1f1609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732272399338,"stop":1732272399340,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732272405422,"stop":1732272405560,"duration":138},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5603ec7ee31a <unknown>\n#1 0x5603ec3046e0 <unknown>\n#2 0x5603ec33bdc8 <unknown>\n#3 0x5603ec337926 <unknown>\n#4 0x5603ec3836f6 <unknown>\n#5 0x5603ec382d46 <unknown>\n#6 0x5603ec377203 <unknown>\n#7 0x5603ec345cc0 <unknown>\n#8 0x5603ec346c9e <unknown>\n#9 0x5603ec7bbd0b <unknown>\n#10 0x5603ec7bfc92 <unknown>\n#11 0x5603ec7a8b3c <unknown>\n#12 0x5603ec7c0807 <unknown>\n#13 0x5603ec78e0df <unknown>\n#14 0x5603ec7dd578 <unknown>\n#15 0x5603ec7dd740 <unknown>\n#16 0x5603ec7ed196 <unknown>\n#17 0x7ff69f1f1609 start_thread\n\n","statusTrace":"  File \"/usr/local/lib/python3.8/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/usr/local/lib/python3.8/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/usr/workspace/nintondo/autotests/conftest.py\", line 33, in driver\n    driver = webdriver.Chrome(options=options)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 299, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Restore wallet by valid mnemonic"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_recovery_by_old_mnemonic"},{"name":"host","value":"b3b395eb8b5c"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_recovery_by_old_mnemonic"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":5,"unknown":0,"total":7},"items":[{"uid":"5da76972f62e64cf","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/5da76972f62e64cf","status":"passed","time":{"start":1732271449697,"stop":1732271453122,"duration":3425}},{"uid":"635a69567e0c020b","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/635a69567e0c020b","status":"passed","time":{"start":1732114436979,"stop":1732114440408,"duration":3429}},{"uid":"9f1743d9ae8d8be4","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/9f1743d9ae8d8be4","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5575ec02b31a <unknown>\n#1 0x5575ebb416e0 <unknown>\n#2 0x5575ebb78dc8 <unknown>\n#3 0x5575ebb74926 <unknown>\n#4 0x5575ebbc06f6 <unknown>\n#5 0x5575ebbbfd46 <unknown>\n#6 0x5575ebbb4203 <unknown>\n#7 0x5575ebb82cc0 <unknown>\n#8 0x5575ebb83c9e <unknown>\n#9 0x5575ebff8d0b <unknown>\n#10 0x5575ebffcc92 <unknown>\n#11 0x5575ebfe5b3c <unknown>\n#12 0x5575ebffd807 <unknown>\n#13 0x5575ebfcb0df <unknown>\n#14 0x5575ec01a578 <unknown>\n#15 0x5575ec01a740 <unknown>\n#16 0x5575ec02a196 <unknown>\n#17 0x7fc3ef1b4609 start_thread","time":{"start":1732114017609,"stop":1732114017609,"duration":0}},{"uid":"da918ae43892f51d","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/da918ae43892f51d","status":"passed","time":{"start":1732008803888,"stop":1732008807386,"duration":3498}},{"uid":"9ff5d5d3dd7f37ca","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/9ff5d5d3dd7f37ca","status":"passed","time":{"start":1732006944476,"stop":1732006948088,"duration":3612}},{"uid":"d31abbb524a6e8e8","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/d31abbb524a6e8e8","status":"passed","time":{"start":1732002767811,"stop":1732002771318,"duration":3507}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"e5b19b2d6636900a.json","parameterValues":[]}