{"uid":"dcc03555cc61508e","name":"test_valid_minting_transfers","fullName":"tests.wallet_tests.test_wallet_mint_transfer#test_valid_minting_transfers","historyId":"afefd7bd02e1625af6b363aa55ab95cd","time":{"start":1732272403719,"stop":1732272403719,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55ac4787c31a <unknown>\n#1 0x55ac473926e0 <unknown>\n#2 0x55ac473c9dc8 <unknown>\n#3 0x55ac473c5926 <unknown>\n#4 0x55ac474116f6 <unknown>\n#5 0x55ac47410d46 <unknown>\n#6 0x55ac47405203 <unknown>\n#7 0x55ac473d3cc0 <unknown>\n#8 0x55ac473d4c9e <unknown>\n#9 0x55ac47849d0b <unknown>\n#10 0x55ac4784dc92 <unknown>\n#11 0x55ac47836b3c <unknown>\n#12 0x55ac4784e807 <unknown>\n#13 0x55ac4781c0df <unknown>\n#14 0x55ac4786b578 <unknown>\n#15 0x55ac4786b740 <unknown>\n#16 0x55ac4787b196 <unknown>\n#17 0x7f26e04e6609 start_thread","statusTrace":"request = <SubRequest 'driver' for <Function test_valid_minting_transfers>>\n\n    @pytest.fixture(autouse=True, scope=\"function\")\n    def driver(request):\n        options = webdriver.ChromeOptions()\n    \n        # Отключение анимаций\n        options.add_argument(\"--disable-animations\")\n    \n        prefs = {\"profile.managed_default_content_settings.images\": 2}  # 2 отключает загрузку изображений\n        options.add_experimental_option(\"prefs\", prefs)\n    \n        # Прочие настройки\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--window-size=1280,720\")\n        options.add_argument('--disable-dev-shm-usage')\n        options.add_argument('--disable-gpu')\n    \n        # Путь к расширению\n        # project_path = os.path.dirname(os.path.abspath(__file__))\n        # extension_path = f\"{project_path}/extension/dist/chrome\"\n    \n        # CI\n        extension_path = \"/app/extension\"\n    \n        options.add_argument(f\"--load-extension={extension_path}\")\n    \n        # Инициализация драйвера\n>       driver = webdriver.Chrome(options=options)\n\n../conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb1803035e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...wn>\\\\n#15 0x55ac4786b740 \\\\u003Cunknown>\\\\n#16 0x55ac4787b196 \\\\u003Cunknown>\\\\n#17 0x7f26e04e6609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x55ac4787c31a <unknown>\nE       #1 0x55ac473926e0 <unknown>\nE       #2 0x55ac473c9dc8 <unknown>\nE       #3 0x55ac473c5926 <unknown>\nE       #4 0x55ac474116f6 <unknown>\nE       #5 0x55ac47410d46 <unknown>\nE       #6 0x55ac47405203 <unknown>\nE       #7 0x55ac473d3cc0 <unknown>\nE       #8 0x55ac473d4c9e <unknown>\nE       #9 0x55ac47849d0b <unknown>\nE       #10 0x55ac4784dc92 <unknown>\nE       #11 0x55ac47836b3c <unknown>\nE       #12 0x55ac4784e807 <unknown>\nE       #13 0x55ac4781c0df <unknown>\nE       #14 0x55ac4786b578 <unknown>\nE       #15 0x55ac4786b740 <unknown>\nE       #16 0x55ac4787b196 <unknown>\nE       #17 0x7f26e04e6609 start_thread\n\n/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732272399338,"stop":1732272399340,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1732272403719,"stop":1732272403858,"duration":139},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55ac4787c31a <unknown>\n#1 0x55ac473926e0 <unknown>\n#2 0x55ac473c9dc8 <unknown>\n#3 0x55ac473c5926 <unknown>\n#4 0x55ac474116f6 <unknown>\n#5 0x55ac47410d46 <unknown>\n#6 0x55ac47405203 <unknown>\n#7 0x55ac473d3cc0 <unknown>\n#8 0x55ac473d4c9e <unknown>\n#9 0x55ac47849d0b <unknown>\n#10 0x55ac4784dc92 <unknown>\n#11 0x55ac47836b3c <unknown>\n#12 0x55ac4784e807 <unknown>\n#13 0x55ac4781c0df <unknown>\n#14 0x55ac4786b578 <unknown>\n#15 0x55ac4786b740 <unknown>\n#16 0x55ac4787b196 <unknown>\n#17 0x7f26e04e6609 start_thread\n\n","statusTrace":"  File \"/usr/local/lib/python3.8/dist-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/usr/local/lib/python3.8/dist-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/usr/workspace/nintondo/autotests/conftest.py\", line 33, in driver\n    driver = webdriver.Chrome(options=options)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 299, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Valid minting transfers from the wallet"},{"name":"tag","value":"@pytest.mark.usefixtures('driver')"},{"name":"parentSuite","value":"tests.wallet_tests"},{"name":"suite","value":"test_wallet_mint_transfer"},{"name":"host","value":"b3b395eb8b5c"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.wallet_tests.test_wallet_mint_transfer"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":7},"items":[{"uid":"aad397c89cc56986","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/42//#testresult/aad397c89cc56986","status":"failed","statusDetails":"AssertionError: Expected a success message, but it was not displayed.\nassert False\n +  where False = is_displayed()\n +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"dcb46822808a00c84e60226f72db5b60\", element=\"f.68E122E14388C851A889B73F6D16C4B7.d.D0945E3CE548ED9C7481F0B0B9B55853.e.49\")>.is_displayed","time":{"start":1732271413678,"stop":1732271418819,"duration":5141}},{"uid":"422f525ad354dbdb","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/41//#testresult/422f525ad354dbdb","status":"failed","statusDetails":"AssertionError: Expected a success message, but it was not displayed.\nassert False\n +  where False = is_displayed()\n +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"d26011b7e62cbe4b8a4447cc6da7c3e6\", element=\"f.880651576845F854FB28FE6DCF9524F5.d.C26753B30E95C3F92D0F3BA2E9198FAC.e.62\")>.is_displayed","time":{"start":1732114399493,"stop":1732114407142,"duration":7649}},{"uid":"f6a45fb2c10c9871","reportUrl":"https://Panda2k30.github.io/nintondo_autotests/40//#testresult/f6a45fb2c10c9871","status":"broken","statusDetails":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55af6297d31a <unknown>\n#1 0x55af624936e0 <unknown>\n#2 0x55af624cadc8 <unknown>\n#3 0x55af624c6926 <unknown>\n#4 0x55af625126f6 <unknown>\n#5 0x55af62511d46 <unknown>\n#6 0x55af62506203 <unknown>\n#7 0x55af624d4cc0 <unknown>\n#8 0x55af624d5c9e <unknown>\n#9 0x55af6294ad0b <unknown>\n#10 0x55af6294ec92 <unknown>\n#11 0x55af62937b3c <unknown>\n#12 0x55af6294f807 <unknown>\n#13 0x55af6291d0df <unknown>\n#14 0x55af6296c578 <unknown>\n#15 0x55af6296c740 <unknown>\n#16 0x55af6297c196 <unknown>\n#17 0x7f11c4ec4609 start_thread","time":{"start":1732114015826,"stop":1732114015826,"duration":0}},{"uid":"56ea78de232338f4","reportUrl":"https://Panda2k30.github.io/Tests/39//#testresult/56ea78de232338f4","status":"failed","statusDetails":"AssertionError: Expected a success message, but it was not displayed.\nassert False\n +  where False = is_displayed()\n +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"3e61de82d281f1adbe3e0c6a5e53cba7\", element=\"f.270E7C7739F5D30F06F952492D26148C.d.5CF98A05103A9553294B97E052DBA6C5.e.61\")>.is_displayed","time":{"start":1732008768775,"stop":1732008773698,"duration":4923}},{"uid":"b2fae94eabc1dfc1","reportUrl":"https://Panda2k30.github.io/Tests/38//#testresult/b2fae94eabc1dfc1","status":"failed","statusDetails":"AssertionError: Expected success message 'Transfer inscribed successfully', but got ''\nassert 'Transfer inscribed successfully' in ''","time":{"start":1732006909637,"stop":1732006914467,"duration":4830}},{"uid":"c4ad9703e5d8e80a","reportUrl":"https://Panda2k30.github.io/Tests/37//#testresult/c4ad9703e5d8e80a","status":"failed","statusDetails":"AssertionError: Expected a success message, but it was not displayed.\nassert False\n +  where False = is_displayed()\n +    where is_displayed = <selenium.webdriver.remote.webelement.WebElement (session=\"6a6a0fbe719df93dabfbf4a7d1cdb679\", element=\"f.6F410CE2B1451522DFB76B012238F61E.d.5583CC522AF233919B3BAE12F49B59B1.e.60\")>.is_displayed","time":{"start":1732002730947,"stop":1732002736570,"duration":5623}}]},"tags":["@pytest.mark.usefixtures('driver')"]},"source":"dcc03555cc61508e.json","parameterValues":[]}